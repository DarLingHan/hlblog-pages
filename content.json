{"meta":{"title":"HL's Blog","subtitle":"respect myself","description":"","author":"DarLing","url":"https://darlinghan.github.io/hlblog-pages","root":"/"},"pages":[{"title":"关于我","date":"2020-12-15T06:18:00.000Z","updated":"2022-12-14T08:20:05.964Z","comments":true,"path":"about/index.html","permalink":"https://darlinghan.github.io/hlblog-pages/about/index.html","excerpt":"","text":"好听的话我来说 You’ll find that life is still worthwhile,if you just smile.😀 温柔半两，从容一生。——2021-02-02 有时候别人故意抛难题给你时，你可以选择抛回去，而不是绞尽脑汁的在那边想回答，做出决定。——2021-02-03 我们都有着不一样的生命底色，有的人的底色注定贫瘠荒芜，这不是他们的错。你曾经来过，你想播下种子，洒下阳光雨露，你希望那里绿意葱茏。即便最终寸草不生，但请你相信，你其实已经在他们心中种下了那一抹绿意。-2021-02-23 不知道自己的选择对与错，唉，又是人生中的一关 😭。-2021-10-18 两姓联姻，一堂缔约，良缘永结，匹配同称。看此日桃花灼灼，宜室宜家，卜他年瓜瓞绵绵，尔昌尔炽。谨以白头之约，书向鸿笺，好将红叶之盟，载明鸳谱。-2022-01-25 虽然知道迫于形势应该忍受，但是还是忍不住抱怨，还是忍不住心情低落，怎样才能合理的反抗并达到自己想要的效果呢？-2022-09-22 柳暗花明又一村，记0922日的烦恼后？不争不抢竟然就问题顺其自然的解决了！—2022-09-27 如果你和周围的人起各种矛盾，不一定是你错了，而是你们的为人处事不同罢了，换个环境就好。-2022-11-02"}],"posts":[{"title":"flutter_macOS环境配置","slug":"flutter-macOS环境配置","date":"2024-03-11T09:37:57.000Z","updated":"2024-03-11T09:40:04.214Z","comments":true,"path":"2024/03/11/flutter-macOS环境配置/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2024/03/11/flutter-macOS%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","excerpt":"","text":"path环境配置 执行打开.bash_profile文件的命令:1open -e .bash_profile 如果你看到 .bash_profile does not exist.执行 touch .bash_profile（创建 bash_profile文件） 打开.bash_profile文件后直接在最末尾处追加设置flutter bin目录路径为环境变量:不用加～ 保存关闭.bash_profile文件之后,需要执行以下命令,更新环境变量: 1source ~/.bash_profile 检测打开终端执行flutter doctor就发现有效果了.","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"flutter","slug":"前端/flutter","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/flutter/"}],"tags":[]},{"title":"微信小程序css样式问题","slug":"微信小程序css样式问题","date":"2023-02-02T09:12:44.000Z","updated":"2023-02-02T09:21:10.759Z","comments":true,"path":"2023/02/02/微信小程序css样式问题/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2023/02/02/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8Fcss%E6%A0%B7%E5%BC%8F%E9%97%AE%E9%A2%98/","excerpt":"","text":"横向滚动，最后一个元素margin-right失效demo如下，开发过程中发现marign-right在手机端会自动靠右对齐，失效，导致没有间隙 123456&lt;view class=&quot;list&quot;&gt; &lt;view class=&quot;item&quot;&gt;&lt;/view&gt; &lt;view class=&quot;item&quot;&gt;&lt;/view&gt; &lt;view class=&quot;item&quot;&gt;&lt;/view&gt; &lt;view class=&quot;item&quot;&gt;&lt;/view&gt;&lt;/view&gt; 12345678910111213.wrap &#123; width: 705rpx; display: flex; overflow-x: scroll;&#125;.item &#123; width: 80rpx; height: 80rpx; margin-right: 12rpx; border-radius: 12rpx; flex-shrink: 0; background-color: pink;&#125; 解决方案：再套一层view，并设置以下css属性 12345678&lt;view class=&quot;list&quot;&gt; &lt;view class=&quot;wrap&quot;&gt; &lt;view class=&quot;item&quot;&gt;&lt;/view&gt; &lt;view class=&quot;item&quot;&gt;&lt;/view&gt; &lt;view class=&quot;item&quot;&gt;&lt;/view&gt; &lt;view class=&quot;item&quot;&gt;&lt;/view&gt; &lt;/view&gt;&lt;/view&gt; 1234567891011121314151617.list &#123; width: 705rpx; display: flex; overflow-x: scroll;&#125;.item &#123; width: 80rpx; height: 80rpx; margin-right: 12rpx; border-radius: 12rpx; flex-shrink: 0; background-color: pink;&#125;.wrap &#123; display: flex; overflow: visible;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"微信小程序","slug":"前端/微信小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/tags/css/"}]},{"title":"微信小程序元素进入可视区域-TC","slug":"微信小程序元素进入可视区域","date":"2022-12-14T08:23:18.000Z","updated":"2022-12-14T08:33:58.081Z","comments":true,"path":"2022/12/14/微信小程序元素进入可视区域/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/12/14/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%85%83%E7%B4%A0%E8%BF%9B%E5%85%A5%E5%8F%AF%E8%A7%86%E5%8C%BA%E5%9F%9F/","excerpt":"","text":"横行滚动条，用户选中某个元素后进入可视区域注意scroll-view中的scroll-x要为truescroll-into-view的值必须为字母开头，不能中文，与下面的view列表元素的id一致(匹配id) wxml代码 123456789101112&lt;scroll-view class=&quot;scroll-box&quot; scroll-x=&quot;true&quot; scroll-y=&quot;false&quot; scroll-into-view=&quot;&#123;&#123;selectDateInfo.id&#125;&#125;&quot;&gt; &lt;view id=&quot;&#123;&#123;item.id&#125;&#125;&quot; class=&quot;date-item &#123;&#123;selectDateInfo.id == item.id ? &#x27;date-selected&#x27; : &#x27;&#x27;&#125;&#125;&quot; wx:for=&quot;&#123;&#123;weekDateList&#125;&#125;&quot; wx:key=&quot;index&quot; data-item=&quot;&#123;&#123;item&#125;&#125;&quot; bindtap=&quot;selectDateBtn&quot;&gt; &lt;view class=&quot;txt-date&quot;&gt;&#123;&#123;item.txtDate&#125;&#125;&lt;/view&gt; &lt;view class=&quot;number-date&quot;&gt;&#123;&#123;item.numberDate&#125;&#125;&lt;/view&gt; &lt;/view&gt;&lt;/scroll-view&gt; js代码 123456 // 选中列表里某个日期selectDateBtn (event) &#123; this.setData(&#123; selectDateInfo: event.currentTarget.dataset.item &#125;)&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"小程序","slug":"前端/小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[]},{"title":"微信小程序配置绝对路径-TC","slug":"微信小程序绝对路径","date":"2022-08-29T08:41:18.000Z","updated":"2022-12-14T08:21:34.027Z","comments":true,"path":"2022/08/29/微信小程序绝对路径/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/08/29/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/","excerpt":"","text":"微信小程序配置绝对路径两种方式 方式一app.js中配置：1234567App(&#123; // 真的就这一行 require : function($uri)&#123;return require($uri)&#125;, onLaunch : function()&#123; // XXXXXX &#125;&#125;); 使用的地方12345678910// pages/admin/order/list/page.jsconst app = getApp(); // // 除了不是 / 开头，这真的就是个绝对路径，让那些 ../../.. 见鬼去吧const Api = app.require(&#x27;lib/api.js&#x27;);Page(&#123; onLoad : function()&#123; // XXXXXX &#125;&#125;); 方式二app.json中配置resolveAlias123456&#123;&quot;resolveAlias&quot;: &#123; &quot;@utils/*&quot;: &quot;utils/*&quot;, &quot;@api/*&quot;: &quot;api/*&quot; &#125;&#125; 使用的方式12import &#123; CreatePage &#125; from &#x27;@utils/newReXXX&#x27;;import dataJs from &#x27;@utils/data&#x27;;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"小程序","slug":"前端/小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[]},{"title":"苹果电脑MacOs——nvm/node环境搭建","slug":"MacPro-nvm/node环境配置","date":"2022-08-19T06:10:18.000Z","updated":"2022-12-14T08:51:42.532Z","comments":true,"path":"2022/08/19/MacPro-nvm/node环境配置/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/08/19/MacPro-nvm/node%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/","excerpt":"","text":"安装brew tips:https://blog.csdn.net/muyimo/article/details/125211460 12// 按命令提示操作即可 /bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot; 通过brew安装nvm第一步 1brew install nvm 第二步还要按照提示 12345678910111213brew info nvm // 找个命令可以从新打印出教你如何操作的提示// 以下就是提示You should create NVM&#x27;s working directory if it doesn&#x27;t exist: mkdir ~/.nvm // ****1.shell命令行输入这个Add the following to ~/.zshrc or your desired shell // 打开.zshrc文件把以下配置放进去（具体配置根据上面打印出的提示复制）configuration file: export NVM_DIR=&quot;$HOME/.nvm&quot; [ -s &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; ] &amp;&amp; . &quot;/opt/homebrew/opt/nvm/nvm.sh&quot; # This loads nvm [ -s &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; ] &amp;&amp; . &quot;/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm&quot; # This loads nvm bash_completion 遇到找不到.zshrc这个文件？在根目录下确保这个文件是否存在1zsh: ~/.zshrc 然后打开这个文件1open ~/.zshrc 没有权限时1touch ~/.zshrc 常用命令12345678// 安装node版本nvm install 12.XX.XX// 查看版本列表nvm ls// 使用某个版本nvm use 12.XX.XX// 安装完毕后记得重启编辑器`npm`命令才能被识别到","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"工作","slug":"前端/工作","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E4%BD%9C/"}],"tags":[]},{"title":"移动端调试","slug":"移动端调试","date":"2022-08-16T08:13:27.555Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2022/08/16/移动端调试/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/08/16/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E8%B0%83%E8%AF%95/","excerpt":"","text":"安卓端 APP 调试本地代码需要手机连接电脑 ip:端口号;需要支持 chrome://inspect 方式（电脑要能够翻墙) 安装 whistle $ npm install -g whistle 启动 whistle $ w2 start 浏览器配置代理，具体配置值如下a. 安装好SwitchyOmegab. 在SwitchyOmega中新增情景模式，起个名字XXXX，代理协议：HTTP；代理服务器 127.0.0.1；代理端口 8899c. 在auto switch中配置以下三个，条件类型：域名通配符；条件分别设置以下三个环境；情景模式选择以上新增的XXXXd. 然后点击左侧的应用选项 想要即支持本地代理 又支持翻墙代理 配置如下 123456789101112131415161718// 本地环境代理// 情景模式: auto switch 条件类型 条件设置 情景模式 域名通配符 dev.test.ximalaya.com 前端环境代理 域名通配符 m.test.ximalaya.com 前端环境代理 域名通配符 m.ximalaya.com 前端环境代理 域名通配符 * 喜马拉雅代理 // 翻墙代理// 翻墙代理// 情景模式: 喜马拉雅代理代理服务器网址协议 代理协议 代理服务器 代理端口(默认) HTTP 192.168.3.52 47777 安卓端调试 打开chrome://inspect调试 手机端 webview 要支持打开调试模式 链接数据线打开调试模式 ios 调试 ios 手机设置打开调试——网页检查器 pc 端 Safari 浏览器打开——&gt;开发——&gt;信任 客户端 APP 还需要打开允许 Safari 调试 调试过程中出现的问题 chrome://inspect 打开本地的时候 报网络错误解决方案： 下楼散了个步回来就好了-__-莫名其妙，不知道什么原因,难道是翻墙不稳定？","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"移动端","slug":"前端/移动端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}],"tags":[{"name":"工作","slug":"工作","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"whistle","slug":"whistle","permalink":"https://darlinghan.github.io/hlblog-pages/tags/whistle/"}]},{"title":"Hello World","slug":"hello-world","date":"2022-08-16T08:13:27.553Z","updated":"2022-08-16T08:13:27.553Z","comments":true,"path":"2022/08/16/hello-world/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/08/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"小程序原理","slug":"小程序原理","date":"2022-08-11T06:51:18.000Z","updated":"2022-09-21T08:57:57.694Z","comments":true,"path":"2022/08/11/小程序原理/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/08/11/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8E%9F%E7%90%86/","excerpt":"","text":"需要掌握的基础原理底层架构 传统的网页，UI渲染和JS脚本同一个线程中执行；小程序基于性能的考虑启用了双线程。视图层：webview线程，负责启用不同的webview来渲染不同的小程序页面。逻辑层：一个单独的线程执行JS代码，控制视图层的逻辑。 启动过程 准备运行环境微信启动双线程环境，在线程中完成小程序基础库的初始化和预执行。 下载、注入并执行对应小程序代码包初次启动时，需要下载编译后的代码包到本地。如果启动了分包”subPackages”,则只下载主包内容。 渲染小程序首页代码包下载好后，会被加载到适当的线程中，基础库会完成所有页面的注册。 tips: 启动性能优化可以从以上第2、3步来优化小程序的启动性能 代码包代码包越大，耗时越大。小程序的代码包大小上限已提高到8M。 分包限制所有分包大小不超过16M单个分包/主包大小不能超过2M同一个分包中，分包预加载的限制不超过2M tips: 自定义第三方组件，需要放在主包内；小程序的tab切换页，必须放在主包里。 123456789// app.json中&quot;preloadRule&quot;: &#123; &quot;pages/index/index&quot;: &#123; &quot;network&quot;: &quot;all&quot;, &quot;packages&quot;: [ &quot;useXXX&quot; ] &#125; &#125; 小程序渲染过程 准备新的webview线程环境，包括基础库的初始化 从逻辑层到视图层的初始数据通信 逻辑层数据 + wxml 构建出节点树（包括节点属性、实践绑定），节点树 + wxss 结合完成页面渲染 微信会提前准备webview环境，所以小程序的渲染损耗主要在以上第2、3步（数据通信和节点树创建/更新） 优化方式 分包 部分页面H5化（降级方案）列如数据报告模块、图表库等增加整体包体积的模块，可以采用webview改造H5化。 减少代码包中的静态资源文件a. 将图片、视频等静态资源放在CDN上b. 通过插件比如gulp-clean 清除一些冗余的样式文件 渲染性能优化a.降低线程间的通信频次（合并setData)b.减少线程间通信的数据量(只把与界面渲染相关数据放在data中，setData传输的数据越大，线程间通信耗时越长，渲染速度越慢) 1// 比如一些js计算，删除数组中的某个元素，不影响wxml的渲染，这个属性就不要放在data中 c.减少wxml节点数量 一个页面少于1000个wxml节点,节点树深度少于30层，子节点数不大于60个。（节点树太大会增加内存使用、增加重排时长）d.精简首屏数据 延迟（异步）请求非关键渲染数据e.避免阻塞渲染 小程序启动流程中，会顺序执行app.onLaunch————&gt;app.onShow————&gt;page.onLaunch————&gt;page.onShow————&gt;page.onReady,所以尽量避免在这些生命周期理使用Sync结尾的同步API，如wx.setStorageSync、wx.getSystemInfoSync等。f.频繁触发的事件，使用节流,减少通信频次。g.利用本地缓存——wx.setStorage 可以通过文件系统，将图片缓存到本地，官方支持可以缓存200MB. 1234567891011121314151617181920212223242526272829303132333435363738394041// 在utils.js里封装存/删方法......// 把图片缓存到本地// 文件系统管理器const fs = wx.getFileSystemManager();// 1.先下载图片// 2.然后保存图片到缓存fs.saveFile(&#123; tempFilePath: res.tempFilePath, success(res) &#123; resolve(res); &#125;, fail(res) &#123; reject(res) &#125;&#125;)// 3.判断图片是否已存在缓存中 fs.getSavedFileInfo(&#123; filePath: path, success(res) &#123; resolve(true); &#125;, fail(res) &#123; reject(false) &#125;,&#125;)// 4.删除缓存里已经存在的图片fs.removeSavedFile(&#123; filePath: path, success(res) &#123; resolve(res); &#125;, fail(res) &#123; reject(res) &#125;&#125;)//把图片的路径和订单编号保存在storage里面wx.setStorageSync(&#x27;listcache&#x27;, [])wx.getStorageSync(&#x27;listcache&#x27;) h.开启http缓存?i.开启图片缓存?j.图片懒加载、雪碧图优化 小程序的image组件自带lazy-load懒加载支持k.使用自定义组件 例如抽离上传图片和视频的功能，封装成一个组件。组件的更新独立并不影响页面上其他元素的更新。l.回收页面计时器 列如保存草稿功能，需要定时器轮询保存 总结 小程序优化性能注意事项 由于小程序的更新机制影响，启动耗时会在版本发布几天内恢复到稳定水平。小程序新版本发布后，除了需要重新下载代码包外，版本更新也会引起包含小程序信息缓存、Code Caching、初始渲染缓存在内的各类缓存发生更新，也会影响更新后小程序首次启动的耗时。小程序性能优化过程中的思考 小程序性能优化的方式 用哪几种指标判断小程序的性能？体积大小、页面加载速度还有呢？通过何种工具获取这些指标来获取优化前后对比的数据？ 在业务不时的迭代过程中（业务需求增加包体积等），如何数据不影响优化后的指标？ wxml压缩wxs问题 小程序优化规范 严格控制分包数量，根据业务划分分包名称，对应的需求放在对应分包下分包9大类 需求需要判断是否必须放在主包下，如果不必要就放在分包下；如果必要，是否能使用分包异步化 如果自定义组件只在某个分包的页面中使用，应定义在页面的配置文件中 如果插件只在某个分包的中使用，请仅在分包中引用插件 小程序优化方案 第一步： 分包归类，确定主包中可移动到分包下的页面 第二步： 移、除主包中未依赖的组件到对应的分包下；删除主包中未使用的组件或js文件 第三步： 分包异步化 第四步： 静态资源上传到CDN 第五步： 压缩wxml(解决wxs的问题，提取wxs标签的代码，跳过压缩)","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"小程序","slug":"前端/小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[]},{"title":"动画、播放器、文件加载过大","slug":"动画、播放器、文件加载过大","date":"2022-06-14T04:54:54.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2022/06/14/动画、播放器、文件加载过大/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/06/14/%E5%8A%A8%E7%94%BB%E3%80%81%E6%92%AD%E6%94%BE%E5%99%A8%E3%80%81%E6%96%87%E4%BB%B6%E5%8A%A0%E8%BD%BD%E8%BF%87%E5%A4%A7/","excerpt":"","text":"解决前端动画卡顿的问题页面卡顿原因：我们设备大多数的肉眼可见不卡顿是 60fps,就要求浏览器对每一帧动画的渲染在 16ms 内完成。优化方案如下： 1.css 优化 尽量使用 transform 属性，避免使用 height、width、margin、padding 等.浏览器的渲染进程里有主线程和合成线程，margin-left:-18px，就要计算 18 次，经历 DOM tree、css tree、render tree、绘制这些阶段，然后合成线程也要计算 18 次，但是使用 transform：translate 只要 1+18=19 次。(大概次数，不是准确的数字，只是举例子) 要求较高时，可以开启 GPU 硬件加速器当触发 3d 属性时，浏览器会默认开启。比如 -webkit-transform:translate3d(250px,250px,250px) 使用 flex 布局代替原有的老式布局，flex 布局更加高效。 2.js 优化 使用 requestAnimationFrame 代替 setTimeOut 和 setIntervalrequestAnimationFrame 是 window 对象的一个方法，他会告诉浏览器执行一个动画，可以指定调用回调函数进行更新动画，但是 setTimeOut 和 setInterval 无法确认执行时机。 DOM 无关的耗时操作放到 Web Worker 中Worker 线程负担高延迟且 UI 无关的任务，主线程负责 UI 交互就会相对流畅。 减少需要计算样式的元素个数 tips: https://blog.csdn.net/terrychinaz/article/details/115518078 transition 和 animation 的区别12345transiton: property duration timing-function delay;// 属性名称、过渡时间、速度曲线、延迟时间animation: name duration time-function delay iteration-count direction;// 帧（keyframe）名称、过渡时间、速度曲线、延迟、播放次数、播放方向 transition 只有两个状态——开始和结束状态animation 可以设置多个状态，有帧的概念 transition 需要借助别的方式触发 比如 hover 或者 js animation 可以自动触发 animation 功能更强大 可以设置循环次数、播放方向、播放状态等，这些都是 transition 做不到的 animation 设置离不开@keyframes,也就是说设置动画帧效果 transition 并不是所有的 css 属性都可以具备过渡效果animationn 几乎所有的 css 属性都可以设置动画效果 tips: transform 也是用来制作动效的，只不过是提供一些函数，做不同的转换。 相同点： animation 和 transition 本质都是通过控制 css 属性变化来达到动画视觉效果，但是 transform 描述的是元素静态样式，这个允许元素旋转、缩放、移动、倾斜。 视频优化 合适的视频格式WebM 相较于 MPEG-4 来说相对小一些，但是有兼容性问题，所以一般 vedio 中配多个 source。（AV1 编码更小） 视频压缩Hybrid、HandBrake、Freemake、MeGui 不需要音频的情况下移除音轨数据，vedio 设置 muted 切片的方式，不断地下载一小段的分片来进行视频播放，避免完整视频下载的流量消耗 不需要使用视频的场景，去掉视频，可以通过媒体查询避免下载视频。 12345@media screen and (max-width: 650px) &#123; #hero-video &#123; display: none; &#125;&#125; 播放器 sdk 的优化、数据预取、码率自适应 … 视频不单单是内容，还有尺寸、字幕、时长、版权信息等。一个 mp4 文件是由多个 box 组成的。如果是在线观看，就会不停的查找视频的信息，比如开始、结束的位置，所以会多次发起请求。但是如果视频就在本地，就没有什么问题，所以预加载可以起到优化的作用。 … 利用一些工具对视频进行加工，比如把 Moov box 提到视频的前面。 tips: http://www.proyy.com/6970157600419610638.html","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"动画","slug":"动画","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%8A%A8%E7%94%BB/"},{"name":"视频","slug":"视频","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E8%A7%86%E9%A2%91/"}]},{"title":"常见的js兼容性问题","slug":"css相关问题","date":"2022-06-10T08:54:54.000Z","updated":"2022-08-16T08:13:27.553Z","comments":true,"path":"2022/06/10/css相关问题/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/06/10/css%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/","excerpt":"","text":"常见的 js 兼容性问题有哪些 弹框显示时，禁止背景滚动、并且记录滚动距离 1234567891011// ****showDialog时****// 1.设置body的position: fixed;// 2. 记录滚动的距离 window.scrollYQ.$(&quot;body&quot;).css(&quot;top&quot;, -window.scrollY + &quot;px&quot;);Q.$(&quot;body&quot;).css(&quot;position&quot;, &quot;fixed&quot;);// ***hideDialog时****// 恢复body的默认属性Q.$(&quot;body&quot;).css(&quot;position&quot;, &quot;&quot;);window.scrollTo(0, -parseInt(Q.$(&quot;body&quot;).css(&quot;top&quot;)));Q.$(&quot;body&quot;).css(&quot;top&quot;, &quot;&quot;); 获取事件 123function (evt) &#123; var e = evt || window.event&#125; 事件 event 的属性，获取坐标，IE 下是，event.x/event.y，其他浏览器是 event.pageX/event.pageY 阻止超链接的默认行为 12// IE是 event.returnValue= false// 其他浏览器是 event.preventDefault()","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"js","slug":"js","permalink":"https://darlinghan.github.io/hlblog-pages/tags/js/"},{"name":"兼容性","slug":"兼容性","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"}]},{"title":"webpack如何编写一个loader、plugin","slug":"webpack_如何编写一个loader、plugin","date":"2022-06-09T02:54:54.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2022/06/09/webpack_如何编写一个loader、plugin/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/06/09/webpack_%E5%A6%82%E4%BD%95%E7%BC%96%E5%86%99%E4%B8%80%E4%B8%AAloader%E3%80%81plugin/","excerpt":"","text":"webpack 如何编写一个 loader、plugin","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"webpack","slug":"webpack","permalink":"https://darlinghan.github.io/hlblog-pages/tags/webpack/"}]},{"title":"算法初识1","slug":"sf初识1","date":"2022-02-15T03:18:20.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2022/02/15/sf初识1/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2022/02/15/sf%E5%88%9D%E8%AF%861/","excerpt":"","text":"为什么学习数据结构与算法？开发工程师就是把实际的问题转化成计算机指令——设计出数据结构，再加以算法。 review 计算机世界的基本规则 各种框架的原理对于算法应用 学习思路及方法 对数据结构和算法有一个全方位的了解 分类练习——一段时间只练习固定分类的题目，比如只练习二叉树的，开始之前，对其具体定义、概念、应用及可能出现的恶类型进行梳理了解再开始。 对一个类型针对性练习后，定期回顾，发现规律，进行总结。 最终达到的效果就是： 当你看到一个题目，首先你要想到它属于哪种数据结构与算法，然后想到这是一个什么类型的问题，然后是此类问题的解决方法。 时间复杂度对象的时间复杂度是 O(1) 时间复杂度：基本操作重复执行的次数（频度），反映了程序运行开始到结束的时间。没有循环语句，记作 O(1),也称为常数阶。只有一重循环，记作 O(n),频度与问题规模 n 呈线性增大关系。 12345678// 常见的时间复杂度有：O(1): Constant Complexity: Constant 常数复杂度O(log n): Logarithmic Complexity: 对数复杂度O(n): Linear Complexity: 线性时间复杂度O(n^2): N square Complexity 平⽅方O(n^3): N square Complexity ⽴立⽅方O(2^n): Exponential Growth 指数O(n!): Factorial 阶乘 空间复杂度空间复杂度——运行完一个程序所需的内存大小。 数据结构数据元素之间存在的一种和多种特定的关系集合。从逻辑结构、存储结构这两个维度来理解它。 逻辑结构数据之间的关系，可以分为两种：线性结构、非线性结构。 线性结构： 一个有序数据元素的集合。数据元素之间的关系是一对一的，除了第一个和最后一个数据元素之外，其它数据元素都是首尾相连的。a. 常用的线性结构有：栈、队列、链表、线性表。 非线性结构：各个数据元素不再保持在一个线性序列中，每个数据元素可能与零个或多个其他数据元素发生联系。a. 常见的非线性结构： 二维数组、树等。 存储结构逻辑结构用计算机语言的实现。常见的存储结构有：顺序存储、链式存储、索引存储以及散列存储。 例如：a.数组在内存中的位置是连续的，它就属于顺序存储；b.链表是主动建立数据间的关联关系的，在内存中不一定连续，属于链式存储。c.还有顺序和逻辑上都不存在顺序关系，但是你可以通过一定的方式去访问它的哈希表，数据散列存储？？？ 感谢掘金大大的文章，让我在学习算法的道路上茅塞顿开！ 前端如何准备数据结构与算法 数据结构——二叉树——每个节点最多有两个子树的树结构（左子树、又子树）树——用来模拟具有树状结构的数据集合。 二叉树前序遍历（根在前）根、左、右 中序遍历（根在中）左、根、右 后序遍历（根在后）左、右、根","categories":[{"name":"算法","slug":"算法","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E7%AE%97%E6%B3%95/"}],"tags":[{"name":"算法","slug":"算法","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E7%AE%97%E6%B3%95/"}]},{"title":"nrm使用问题","slug":"nrm使用问题","date":"2021-09-23T08:21:03.000Z","updated":"2022-08-16T08:13:27.553Z","comments":true,"path":"2021/09/23/nrm使用问题/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/09/23/nrm%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98/","excerpt":"","text":"nrm 切换源失败报以下错误 1Error: EPERM: operation not permitted, scandir &#x27;/Users/mac/.Trash&#x27; 现象是： 项目本地看到的是在 taobao 源上，nrm use XX，切换不成功，还是停留在 taobao 源上；但是全局 terminal 打开的控制台却已经在 XX 源上。 原因：项目本地的.npmrc 文件里写死了在淘宝源上，优先级最高，导致切换不成功，也可以通过cat ~/.npmrc 命令查看全局；./.npmrc 命令查看当前目录下的。","categories":[],"tags":[{"name":"npm","slug":"npm","permalink":"https://darlinghan.github.io/hlblog-pages/tags/npm/"}]},{"title":"xm-work-需求评审","slug":"xmly-work","date":"2021-06-29T03:41:04.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2021/06/29/xmly-work/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/06/29/xmly-work/","excerpt":"","text":"售前限制薅羊毛用户无脑领课背景： 产品说主 App 内用户不需要输入手机号，直接点击 0 元领课按钮，会导致很多无效订单。订单数=》加老师数 直接的转化率 数据就会不准确，数据模型有问题。思考： 输入手机号是可以一定程度上过滤部分无脑下单的用户疑问点： 账户 A 登陆主 App,但是售前 H5 页面会存在登陆 B、C、D 等账户的问题，是否会影响订单和转化率的关系。一个用户用了多个手机号下单，但是只有一个微信加了老师。那么真实订单数 : 加老师的比率就会不准确。产品答复： 这样的用户存在少数——不影响（有疑问？）方案： 1.希望用户不要输入主 App 之外的手机号 2.手机号输入的过滤方案——》改为问卷调查的弹框方案（比如询问宝宝的性别、年龄等），是否会更精确的过滤掉无效订单。 主要问题： 订单数 和 加老师不成正比——存在多个无效订单，不利于用户模型的精准性。 产品方案：增加 0 元下单的门槛——通过输入手机号的方式，增加下单流程成本，减少无脑领单。 存在的争议： A 账户登陆 App，但是却用 B、C、D、E 等多个账户领课。可能会存在以下几个风险：a. 用户用 B 账户购买后，过了几个月，记不得自己用哪个账户购买的，在 A 账户下，查不到对应的记录。（后来了解到可以通过订单查到对应下单的账户）b. 主 app 里登陆两个账户（原本设计流程都是同一套账户体系，账户可能关联的功能系统比较多，比如用户画像，数据分析，订单等流程；可能会影响其中的各个环节，这都是现在无法预估的，都是未知风险点） 方案 1: 切换账户时，退出 A 账户，登陆 B 账户——不符合业务方的要求，不能因为售前 h5 页把主站 APP 的用户信息都清空掉了。 改方案： 切换账户时，不退出登陆，不清空 A 账户的值，直接登陆 B 账户，进入到手机号码校验页，过程中遇到的问题：a. 当进入到手机号码校验页时会验证失败，说手机未绑定。————定位问题：主站那边会校验手机号————处理方案：去掉校验b. 去掉校验后，在主站 App 里，拉起小程序进入站内页(与预期不符），加上 encode（主站那边的人说加上这个-目前也不知道什么含义）后，就可以拉起小程序进入预期的动态公号页。c. 去领课——去加老师文案优化d. A 账号下用 B 账号下单，最终订单落在 B 账号下，A 账号是没有下单的。那么 A 账户没有下单会被认为是无效用户，B 账户下单是有效用户。AB 账户会被当成两个用户。A 账户 无效用户uvB 账户 有效用户 对于uv来讲 用户即有效又无效 对于手机号来讲 那没有问题 风险点： 去掉中台手机号验证————风险未知————这个看上线后表现 是否会收到客诉————关于 A 账户下查不到自己购买的课程问题（用户记不得自己是 A 账户下用了 B 账户购买） 去掉校验后，加上 encode，进入小程序的场景，是否漏掉了一些————未知，需要上线后看反馈 用户模型,是否通过该方案更准确———— 实际下单数 与 加老师数 比列是否缩小————通过埋点获取数据 因为双账户的问题————存在的其他未知风险——需要上线后反馈 小程序 马上打卡—— 用的 passport 账户 马上打卡 beta—— passport 测试环境账户走不通,售前测试环境只能访问马上打卡 beta 版本，并且配置的公众号对应的图文也有问题。","categories":[{"name":"工作","slug":"工作","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"工作","slug":"工作","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"伪元素实现虚线","slug":"伪元素实现虚线","date":"2021-05-08T09:08:34.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2021/05/08/伪元素实现虚线/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/05/08/%E4%BC%AA%E5%85%83%E7%B4%A0%E5%AE%9E%E7%8E%B0%E8%99%9A%E7%BA%BF/","excerpt":"","text":"伪元素实现横向虚线——可调整虚线之间的距离背景：border: 1px dotted #ccc;并不能调整虚线之间的距离解决方案： 伪元素、渐变实现. 1234567891011.column-item::before &#123; width: 100%; height: 1px; background-image: linear-gradient(to left, #f1eded 0%, #ccc 50%, transparent 50%); /** toleft横向 to bottom纵向**/ background-size: 8px 1px; background-repeat: repeat-x; /** x轴上的渐变 横向的虚线 **/ position: absolute; content: &#x27;&#x27;; top: 0; left: 0;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/tags/css/"},{"name":"伪元素","slug":"伪元素","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E4%BC%AA%E5%85%83%E7%B4%A0/"}]},{"title":"npm install原理","slug":"npm install原理","date":"2021-05-06T12:23:42.000Z","updated":"2022-08-16T08:13:27.553Z","comments":true,"path":"2021/05/06/npm install原理/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/05/06/npm%20install%E5%8E%9F%E7%90%86/","excerpt":"","text":"npm i的具体机制 早期的时候 是严格按照package.json的结构，一一对应的在node_modules中按照对应的包，这样造成的问题就是: 嵌套层级可能过深，在Windows系统中，文件路径最大长度为260个字符 重复的安装包 后来npm 3.X版本采用扁平化的结构 安装模块时，不管其是直接依赖还是子依赖的依赖，优先将其安装在node_modules根目录。 当安装到相同模块时，判断已安装的模块版本是否符合新模块的版本范围，如果符合则跳过，不符合则在当前模块的node_modules下安装该模块。npm 3.x 版本并未完全解决老版本的模块冗余问题，甚至还会带来新的问题。package.json 通常只会锁定大版本，这意味着在某些依赖包小版本更新后，同样可能造成依赖结构的改动，依赖结构的不确定性可能会给程序带来不可预知的问题。 为了解决 npm install 的不确定性问题，在 npm 5.x 版本新增了 package-lock.json 文件，而安装方式还沿用了 npm 3.x 的扁平化的方式。 package-lock.json 的作用是锁定依赖结构，即只要你目录下有 package-lock.json 文件，那么你每次执行 npm install 后生成的 node_modules 目录结构一定是完全相同的。 这里注意，并不是所有的子依赖都有 dependencies 属性，只有子依赖的依赖和当前已安装在根目录的 node_modules中的依赖冲突之后，才会有这个属性。 npm i的整体流程 检查有无lock文件——》无lock文件，构建依赖树——》不管直接依赖还在子依赖，直接扁平化结构都放在node_modules目录下，遇到相同模块时，判断已安装的模块版本是否符合新模块版本，符合跳过，不符合则在当前模块的node_modules下放置该模块，注意这一步只是逻辑上的确定依赖树，并不是真正的安装——》在缓存中查找依赖树对应的包，不存在则去npm仓库拉取依赖包，校验包的完整性，不完整就重新下载。下载包成功后解压到node_modules下。——》生成lock文件 检查有无lock文件——》有lock文件，判断package.json文件的依赖版本是否与package-lock.json文件中的依赖有冲突；——》没有冲突直接跳过拉取包，确定依赖树的过程，直接解压包到node_modules中","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"npm","slug":"npm","permalink":"https://darlinghan.github.io/hlblog-pages/tags/npm/"}]},{"title":"移动端兼容性问题整理","slug":"移动端兼容性问题整理","date":"2021-04-21T09:08:30.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2021/04/21/移动端兼容性问题整理/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/04/21/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/","excerpt":"","text":"红米Note手机position: fixed;布局定位失效。 设备信息:型号：Redmi Note 8 Pro版本：10 现象如下：fixed定位的元素随着滚动条滚动了；后来排查发现是因为某个元素宽度超出屏幕，导致定位失效了。 解决方案如下:1234*&#123; -webkit-overflow-scrolling:touch; overflow-x: hidden !important;&#125;*","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"移动端","slug":"前端/移动端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}],"tags":[{"name":"兼容性","slug":"兼容性","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"}]},{"title":"移动端css开发小技巧","slug":"移动端css开发小技巧","date":"2021-04-15T10:04:16.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2021/04/15/移动端css开发小技巧/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/04/15/%E7%A7%BB%E5%8A%A8%E7%AB%AFcss%E5%BC%80%E5%8F%91%E5%B0%8F%E6%8A%80%E5%B7%A7/","excerpt":"","text":"css 设置 iPhoneX 的安全距离如果元素上设置了postion属性，需要设置在该属性上，只设置在 body 上会无效。也可以作用于margin-top属性上，重要的是安全距离值。 12345padding-top: constant(safe-area-inset-top); //为导航栏+状态栏的高度 88pxpadding-left: constant(safe-area-inset-left); //如果未竖屏时为0padding-right: constant(safe-area-inset-right); //如果未竖屏时为0padding-bottom: constant(safe-area-inset-bottom); //为底下圆弧的高度 34pxpadding-bottom: env(safe-area-inset-bottom); tips: 注意：当 viewport-fit=contain 时 env() 是不起作用的，必须要配合 viewport-fit=cover 使用。对于不支持 env() 的浏览器，浏览器将会忽略它。 tips:之前使用的 constant() 在 iOS11.2 之后就不能使用的，但我们还是需要做向后兼容，像这样：注意：env() 跟 constant() 需要同时存在，而且顺序不能换。 12padding-bottom: constant(safe-area-inset-bottom); /* 兼容 iOS &lt; 11.2 */padding-bottom: env(safe-area-inset-bottom); /* 兼容 iOS &gt;= 11.2 */ 新增 viweport-fit 属性，使得页面内容完全覆盖整个窗口： 1&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, viewport-fit=cover&quot; /&gt; img标签的图片，保持原有图片比例尺寸，裁剪123456img &#123; width: 1.11rem !important; height: 1.275rem !important; object-fit: cover; object-position: center;&#125; 移动端去掉滚动条的样式1234*::-webkit-scrollbar &#123; width: 0 !important; display: none !important;&#125; 禁止 h5 页面在移动端左右拖动后来发现是因为自己设置某个div元素样式的宽度100vw,没有设置box-sizing,导致出现了横向滚动条. 移动端禁止页面背景拖拽123/* 禁止页面拖拽 */touch-action: none;pointer-events: auto; 顶部标题或底部下单等按钮开发时注意 fixed不要每次测试提个 bug,开发过程中要有意识。 移动端1px适配123456789.border-bottom-1px &#123; border-bottom: 1px solid #eee; [data-dpr=&quot;1&quot;] &amp; &#123; border-bottom: 1px solid #eee; &#125; [data-dpr=&quot;3&quot;] &amp; &#123; border-bottom: 3px solid #eee; &#125;&#125; 避免 300 毫秒的延迟1234/* 避免点击300ms延迟 */* &#123; touch-action: manipulation;&#125; 内容 css 超出三行...三个点展示 背景: 有兼容性问题在谷歌、QQ 浏览器、搜狗浏览器，360 浏览器的极速模式下是正常显示省略号的，在火狐、ie、360 兼容模式下是没有显示省略号的。 1234567.content &#123; display: -webkit-box; overflow: hidden; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 2;&#125; 在开发过程中，发现在苹果手机设备上，内容超出时，不能被隐藏。解决方法： 发现是因为样式没有穿透的原因，需要用到Vue的深度选择器/deep/ tips: vue 的深度选择器&gt;&gt;&gt;或/deep/或::v-deep的用法,如果你希望 scoped 样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用 &gt;&gt;&gt; 操作符。有些像 Sass 之类的预处理器无法正确解析 &gt;&gt;&gt;。这种情况下你可以使用 /deep/ 或 ::v-deep 操作符取而代之——两者都是 &gt;&gt;&gt; 的别名，同样可以正常工作。 举例 1： 1234567891011121314151617.content &#123; margin: 0.15rem 0; font-family: PingFangSC-Regular; font-size: 0.14rem; color: #777777; line-height: 0.2rem; display: -webkit-box; overflow: hidden; white-space: initial; text-overflow: ellipsis; -webkit-box-orient: vertical; -webkit-line-clamp: 3; /deep/ p, /deep/ span &#123; display: initial; &#125;&#125; 举例 2:控制v-html中的样式———— 标签部分 123&lt;div class=&quot;bottom-content&quot;&gt; &lt;div class=&quot;content&quot; v-html=&quot;info.content&quot;&gt;&lt;/div&gt;&lt;/div&gt; 样式部分 123456.content &gt;&gt;&gt; img &#123; width: 100% !important;&#125;.content /deep/ img &#123; width: 100% !important;&#125; calc兼容性问题发现 iPhone5 的机型，calc属性不生效。所以需要额外再写上本身的样式； 123456.bottom-spacing &#123; // 设置iPhone X的安全距离 padding-bottom: 1rem; padding-bottom: calc(constant(safe-area-inset-bottom) + 1rem); padding-bottom: calc(env(safe-area-inset-bottom) + 1rem);&#125; 前端识别 string 中的\\n自动换行只需要在显示结果的样式上加上：white-space: pre-line;属性就可以了。 超出两行(或 n 行)三个点显示1234567891011121314.product-title-name &#123; font-size: 0.19rem; color: #121212; line-height: 0.23rem; max-height: 0.46rem; overflow: hidden; word-break: break-all; font-weight: bold; text-overflow: ellipsis; display: -webkit-box; /*! autoprefixer: off */ -webkit-box-orient: vertical; -webkit-line-clamp: 2;&#125; css 实现三角形、菱形 三角形利用 border 的盒模型实现，border-left 就可以 12345.test &#123; border: 30px solid transparent; border-bottom: 30px solid cyan; width: 0;&#125; 菱形——可以用两个 div 拼接；或者一个正方形的 div 去transform 45° img没有 src 属性时(未加载完毕时)自动出现边框，如何去掉？1234img[src=&quot;&quot;],img:not([src]) &#123; opacity: 0;&#125; justify-content兼容性问题此属性在部分手机上有兼容性问题，改成justify-content: flex-end;就好了 1justify-content: right; css 实现从左到右渐变，背景色与背景图片融为一体，并且图片有透明度设置图片的透明度，只支持png格式的 12345/* 从左到右 */background: linear-gradient(to right, #140554, #30087c, #140554), url(https://imagev2.xmcdn.com/storages/9055-audiofreehighqps/0E/55/GKwRIW4FbRqaAAJTdAD49wUG.png);background-size: 100%;background-repeat: no-repeat;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"移动端","slug":"前端/移动端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}],"tags":[{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/tags/css/"},{"name":"安全距离","slug":"安全距离","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%AE%89%E5%85%A8%E8%B7%9D%E7%A6%BB/"}]},{"title":"工作","slug":"work","date":"2021-03-22T08:30:04.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2021/03/22/work/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/03/22/work/","excerpt":"","text":"转正前谈话过去五个月中，印象最深的工作是哪个项目觉得汇报对象怎么样(leader)觉得公司怎么样对以后的发展规划 工作上设计更宽泛的业务，比如登录、支付等等 朝管理层发展 以后转正要好好准备这些问题啊，又是乱七八糟也不知道说了啥，就觉得很肤浅，都是在强调组织氛围，吃喝玩乐。。。没谁了我。/(ㄒoㄒ)/~~ tips 对了，今天联系了私教，要健身啦！！！要坚持下去啊！！！","categories":[{"name":"工作","slug":"工作","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B7%A5%E4%BD%9C/"}],"tags":[{"name":"工作","slug":"工作","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%B7%A5%E4%BD%9C/"}]},{"title":"时间日期处理","slug":"时间日期处理","date":"2021-03-19T06:46:14.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2021/03/19/时间日期处理/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/03/19/%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/","excerpt":"","text":"js对时间戳处理成年月日时分秒 + yyyy.mm.dd12345678910111213export function timeToDate(time, type = &#x27;yyyy.mm.dd&#x27;) &#123; let date = new Date(time) let day = date.getDate() if ((day + &#x27;&#x27;).length &lt; 2) &#123; day = &#x27;0&#x27; + day &#125; if (type === &#x27;yyyy.mm.dd&#x27;)&#123; return `$&#123;date.getFullYear()&#125;.$&#123;date.getMonth() + 1&#125;.$&#123;day&#125;` &#125; else if (type === &#x27;yyyy.mm.dd hh:mm&#x27;) &#123; let minutes = (date.getMinutes() + &#x27;&#x27;).length &lt;= 1 ? (&#x27;0&#x27; + date.getMinutes()) : date.getMinutes() return `$&#123;date.getFullYear()&#125;.$&#123;date.getMonth() + 1&#125;.$&#123;day&#125; $&#123;date.getHours()&#125;:$&#123;minutes&#125;` &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"js","slug":"js","permalink":"https://darlinghan.github.io/hlblog-pages/tags/js/"}]},{"title":"vscode开发技巧集合","slug":"vscode开发技巧集合","date":"2021-03-18T09:14:36.000Z","updated":"2022-08-29T11:07:43.644Z","comments":true,"path":"2021/03/18/vscode开发技巧集合/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/03/18/vscode%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7%E9%9B%86%E5%90%88/","excerpt":"","text":"自动补齐html标签插件 HTML Snippets 查看文件代码修改记录插件 gitLens","categories":[{"name":"工具","slug":"工具","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"vscode","slug":"vscode","permalink":"https://darlinghan.github.io/hlblog-pages/tags/vscode/"}]},{"title":"正则","slug":"正则","date":"2021-03-12T07:47:15.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2021/03/12/正则/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/03/12/%E6%AD%A3%E5%88%99/","excerpt":"","text":"匹配除中文、空格以外的其他所有字符1234567891011// 先校验空格，再校验非中文var line = &#x27;aa bb cc&#x27;if (line.trim().split(/\\s+/).length &gt; 2)......function validateLine (line)&#123; // var checkKaMi=/^[A-Za-z0-9_]+[\\s]+[A-Za-z0-9_]+$/; // 非中文以外的所有其他字符 var checkKaMi=/^[^\\u4e00-\\u9fa5]+[\\s]+[^\\u4e00-\\u9fa5]+$/; return checkKaMi.test(line);&#125;","categories":[{"name":"正则","slug":"正则","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E6%AD%A3%E5%88%99/"}],"tags":[]},{"title":"小程序、公众号开发过程中的问题","slug":"小程序、公众号工作纪要","date":"2021-03-02T08:30:32.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2021/03/02/小程序、公众号工作纪要/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/03/02/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E3%80%81%E5%85%AC%E4%BC%97%E5%8F%B7%E5%B7%A5%E4%BD%9C%E7%BA%AA%E8%A6%81/","excerpt":"","text":"背景小程序里支付页——支付成功后需要引导用户关注公众号 准备工作a. 小程序开发者工具下载b. 关注公众号只有以下三个场景才能出现关注公众号组件 https://developers.weixin.qq.com/miniprogram/dev/component/official-account.html①当小程序从扫小程序码场景（场景值1047，场景值1124）打开时②当小程序从聊天顶部场景（场景值1089）中的「最近使用」内打开时，若小程序之前未被销毁，则该组件保持上一次打开小程序时的状态③当从其他小程序返回小程序（场景值1038）时，若小程序之前未被销毁，则该组件保持上一次打开小程序时的状态 发版的时候不能强制设置进入场景。 开发流程static 仓库部署 js文件改变后 octopus的XXX-H5部署 找到对应引用的css文件， 新建一个以当前日期的css文件, css文件修改后,资源文件压缩打包成 compressed.zip 文件 上传到乐趣 生成的地址XXX 替换mall_home仓库引用的对应的static路径的css地址为XXX mall_home仓库部署 测试阶段 拉分支后 合并到某个分支，比如team_qa,jekins地址部署该分支 小程序部署 小的改动 需要上传——》提交审核，一般半天以内会审核通过，最快的一次经历是2小时。 审核通过后还需要全量部署，线上方可生效。 基于只有3种场景才能看到，换了新方案 用户支付成功后，用图片二维码的形式引导用户自行扫码关注。 小程序缓存失效问题需要删除小程序才能生效，重新打开微信也不行。官方还没有优化这个问题。","categories":[{"name":"小程序","slug":"小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"公众号","slug":"小程序/公众号","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%85%AC%E4%BC%97%E5%8F%B7/"}],"tags":[{"name":"微信","slug":"微信","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%BE%AE%E4%BF%A1/"},{"name":"小程序","slug":"小程序","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"公众号","slug":"公众号","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"}]},{"title":"js开发技巧","slug":"js开发技巧","date":"2021-02-03T07:53:56.000Z","updated":"2022-08-16T08:13:27.553Z","comments":true,"path":"2021/02/03/js开发技巧/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/02/03/js%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/","excerpt":"","text":"列表三个元素排一行的布局问题背景： 要求每三个元素占满一行，每个元素之间的间距固定，每个元素的宽度随着设备的分辨率大小适配。解决方案: 将后端返回的一维数组列表转换成二维数组，每三个元素为一组。类似于这样的数据结构:123456789101112131415161718192021222324252627[ [&#123;name: &quot;han&quot;&#125;,&#123;name: &quot;han&quot;&#125;,&#123;name: &quot;han&quot;&#125;], [&#123;name: &quot;han&quot;&#125;,&#123;name: &quot;han&quot;&#125;,&#123;name: &quot;han&quot;&#125;], [&#123;name: &quot;han&quot;&#125;,&#123;name: &quot;han&quot;&#125;,&#123;name: &quot;han&quot;&#125;], [&#123;name: &quot;han&quot;&#125;,&#123;name: &quot;han&quot;&#125;,&#123;name: &quot;han&quot;&#125;]]// js处理方法initData () &#123; // 对列表数据处理 // 添加showChilds属性 首个值的子列表默认展示 // childs的每三个子元素一组——转变为二维数组 方便样式渲染 this.list.forEach((item, index) =&gt; &#123; // 这是vue中新增一个属性控制子列表的展示/隐藏-双向绑定$set // index == 0 &amp;&amp; (this.$set(item, &#x27;showChilds&#x27;, true)) // index != 0 &amp;&amp; (this.$set(item, &#x27;showChilds&#x27;, false)) let resIpList = [] for (let i=0; i &lt; item.ipList.length; i+=3) &#123; let sliceArr = item.ipList.slice(i, i+3) // 元素2个时，插入一个空元素，防止样式混乱 sliceArr.length == 2 &amp;&amp; sliceArr.push(&#123;&#125;) resIpList.push(sliceArr) &#125; // item.ipList = resIpList // 覆盖原有的ipList属性会导致数据问题，所以新起了一个属性名ipListNew this.$set(item, &#x27;ipListNew&#x27;, resIpList) &#125;);&#125; js动态设置每个元素的宽度——整个屏幕宽度减去间距/312345678this.$nextTick(() =&gt; &#123; let allWidth = Q.$(&quot;.cabinet-area&quot;).width() let spaceWidth = Q.$(&quot;.cabinet-area&quot;).css(&quot;padding-left&quot;).split(&quot;px&quot;)[0] // 动态计算元素宽度 let itemWidth = (parseInt(allWidth) - parseInt(spaceWidth )* 6) / 3 Q.$(&quot;.ip-item&quot;).width(itemWidth) Q.$(&quot;.ip-item&quot;).height(itemWidth / 0.8) // 图片宽高比0.8&#125;) css属性采用flex布局，默认不换行,元素间间距相等space-between1234.ip-list &#123; display: flex; justify-content: space-between;&#125; 利用数组的并集交集思想解决复选框的正选反选问题123456789101112131415161718selectChange () &#123; // 先过滤一层，把游戏选中的数据过滤出来（无所谓正选反选) let selectArr = Object.keys(this.selectList) let filterArr = this.gameList.filter((item) =&gt; &#123; return selectArr.indexOf(item.name) &gt; -1 &#125;) // 正选 数组的交集 选中的数组与serverList的交集 // 反选 数组的差集 选中的数组与serveList的差集 let res = &#123;&#125; for (let gameItem of filterArr) &#123; gameItem.serverList.filter(item =&gt; &#123; this.formItem.switch ? this.selectList[gameItme.name].includes(item.name) &amp;&amp; (res[item.name] = JSON.parse(item.jsons)) : !this.selectList[gameItme.name].includes(item.name) &amp;&amp; (res[item.name] = JSON.parse(item.jsons)) &#125;) &#125; this.serverStrs = res // 选中的json格式化的结果&#125; 弹框禁止背景滚动，scroll维持原有距离，滚动条不默认跳到顶部12345678910111213141516171819202122232425262728293031323334if (true) &#123; // 弹框出现 if (ffsUtils.is_ffsPhoneInfo() &amp;&amp; Q.ua.IOS) &#123; // 如果是IOS环境允许滚动 //do nothing // this.prevent(); &#125; else &#123; // 控制弹幕的背景颜色不因为scroll的改变而改变 Q.cookie.set(&#x27;dm_no_change&#x27;, &#x27;show&#x27;) Q.$(&quot;body&quot;).css(&quot;top&quot;, -window.scrollY + &quot;px&quot;); Q.$(&quot;body&quot;).css(&quot;position&quot;, &quot;fixed&quot;); &#125;&#125; else &#123; if (ffsUtils.is_ffsPhoneInfo() &amp;&amp; Q.ua.IOS) &#123; //do nothing &#125; else &#123; Q.cookie.set(&#x27;dm_no_change&#x27;, &#x27;&#x27;) let scrollY = -parseInt(Q.$(&quot;body&quot;).css(&quot;top&quot;)) Q.$(&quot;body&quot;).css(&quot;position&quot;, &quot;static&quot;); Q.$(&quot;body&quot;).css(&quot;top&quot;, &quot;&quot;); window.scrollTo(0, scrollY); &#125;&#125;// 禁止默认事件prevent() &#123; this.$refs[&quot;mask&quot;].addEventListener( &quot;touchmove&quot;, function (e) &#123; e.preventDefault(); &#125;, false );&#125;,","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"js","slug":"js","permalink":"https://darlinghan.github.io/hlblog-pages/tags/js/"}]},{"title":"移动端H5开发技巧","slug":"移动端H5开发技巧","date":"2021-01-29T11:45:10.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2021/01/29/移动端H5开发技巧/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/29/%E7%A7%BB%E5%8A%A8%E7%AB%AFH5%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/","excerpt":"","text":"移动端H5上下拖拽，导致背景跟在滑动设置body&#123; overflow:hidden &#125; 就可以了 后来发现iphone6机型上并不生效，向下拖拽会看到网页来源，向上拉会看到背景颜色，最后通过设置整个div的position:fixed;不允许上下滑动解决的。 移动端h5页拉起键盘，fixed元素定位失效，并不能吸顶。原因是，键盘拉起的时候，整个webview向上滚动了，无法控制webview的不允许滚动。 解决方案1，键盘拉起时，下面的元素不允许滚动，也就是禁掉页面的mousemove事件。 解决方案2，或者用户触碰到键盘以外区域，就让input失焦调，从而达到页面不可滚动的视觉差。12345678910111213141516171819202122232425262728293031if (Q.ua.IOS) &#123; //阻止默认行为函数 function preventDefault(e) &#123; e.preventDefault(); &#125; document.body.addEventListener( &quot;touchmove&quot;, () =&gt; &#123; this.$refs.input.blur(); &#125;, &#123; passive: false, &#125; ); // window.addEventListener(&quot;focusin&quot;, (ev) =&gt; &#123; // window.scrollTo(0, 0); // this.disabledScroll = true; // // 禁用触摸滚动页面 // // document.body.addEventListener(&quot;touchmove&quot;, preventDefault, &#123; // // passive: false, // // &#125;); // &#125;); // window.addEventListener(&quot;focusout&quot;, () =&gt; &#123; // this.disabledScroll = false; // // 恢复触摸滚动页面 // document.body.removeEventListener(&quot;touchmove&quot;, preventDefault, &#123; // passive: false, // &#125;); // &#125;);&#125; 提示弹框显示时，禁止背景滑动，同时背景固定到滑动的位置，而不会因为设置position: fixed跳到顶部1234567891011// ****showDialog时****// 1.设置body的position: fixed; // 2. 记录滚动的距离 window.scrollYQ.$(&quot;body&quot;).css(&quot;top&quot;, -window.scrollY + &quot;px&quot;);Q.$(&quot;body&quot;).css(&quot;position&quot;, &quot;fixed&quot;);// ***hideDialog时****// 恢复body的默认属性Q.$(&quot;body&quot;).css(&quot;position&quot;, &quot;&quot;);window.scrollTo(0, -parseInt(Q.$(&quot;body&quot;).css(&quot;top&quot;)));Q.$(&quot;body&quot;).css(&quot;top&quot;, &quot;&quot;);","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"移动端","slug":"前端/移动端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"}],"tags":[{"name":"H5","slug":"H5","permalink":"https://darlinghan.github.io/hlblog-pages/tags/H5/"}]},{"title":"git相关命令","slug":"git相关命令","date":"2021-01-29T11:29:47.000Z","updated":"2022-08-19T03:20:59.737Z","comments":true,"path":"2021/01/29/git相关命令/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/29/git%E7%9B%B8%E5%85%B3%E5%91%BD%E4%BB%A4/","excerpt":"","text":"git打tag步骤 git tag XXX git checkout XXX git push origin XXX git 去掉本地修改-回退 git reset –hard git","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"git","slug":"git","permalink":"https://darlinghan.github.io/hlblog-pages/tags/git/"}]},{"title":"css动画显示隐藏div","slug":"css动画显示隐藏div","date":"2021-01-28T10:03:41.000Z","updated":"2022-08-16T08:13:27.552Z","comments":true,"path":"2021/01/28/css动画显示隐藏div/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/28/css%E5%8A%A8%E7%94%BB%E6%98%BE%E7%A4%BA%E9%9A%90%E8%97%8Fdiv/","excerpt":"","text":"css动画实现过渡效果，展示/隐藏div背景： transition高度不固定的情况下，控制高度height: auto失效，解决方案如下： 先将需要做动画的元素设置 max-height: 0px，overflow: hidden; 在事件中给元素添加 max-height: 固定高度（&gt;= 元素的实际高度）案例1：123456.test &#123; transition: max-height 2s; max-height: 10px; overflow: hidden; background: cyan;&#125; 1&lt;div class=&quot;test&quot;&gt;测试测试测试高度不固定的情况下，动画过渡效果&lt;/div&gt; 案例2： 12345678910111213141516171819.bottom-info &#123; color: #999; font-size: .11rem; line-height: .17rem; /** transition: max-height 1s linear; transition: opacity 1s linear; **/ transition: all 0.4s ease-in-out;&#125;/** 滑动显示、隐藏动画效果 **/.info-show &#123; padding-bottom: .1rem; max-height: 1.5rem; opacity: 1;&#125;.info-hide &#123; padding-bottom: 0; max-height: 0; opacity: 0;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/tags/css/"},{"name":"transition","slug":"transition","permalink":"https://darlinghan.github.io/hlblog-pages/tags/transition/"}]},{"title":"长按保存图片","slug":"长按保存图片","date":"2021-01-25T07:13:39.000Z","updated":"2022-08-16T08:13:27.556Z","comments":true,"path":"2021/01/25/长按保存图片/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/25/%E9%95%BF%E6%8C%89%E4%BF%9D%E5%AD%98%E5%9B%BE%E7%89%87/","excerpt":"","text":"h5实现长按保存图片的功能-利用img标签这种方式调起了本地相册。背景： 抽签成功后，获取对应签的带二维码的图片到本地，用户可以通过扫码带二维码的图片进入活动 技术调研： 要调起手机系统相册，还是要借助于原生app,拉起访问系统相册的权限才能实现； h5内嵌的不同环境——各种app、浏览器等等暴露的api各不相同，所以要实现的话，要根据不同环境调起不同的桥接api,所以工作量还是较大； 最后还是用浏览器默认的自带的功能属性img标签长按保存添加图片 允许用户在微信上保存图片 所以img标签需要加上以下属性 允许 12345-webkit-user-select: auto; -moz-user-select: auto; -khtml-user-select: auto; -ms-user-select: auto;user-select: auto; tips:user-select: auto; =&gt; 用户可以选中元素中的内容user-select: none; =&gt; 用户不可选中元素中的内容user-select: text; =&gt; 用户可以选中元素中的文字 禁止——仅支持IE10及以上的高版本浏览器。IE9 以下请使用 onselectstart=&quot;return false;&quot; 的方式来实现。 1234567-webkit-user-select: none; -moz-user-select: none; -khtml-user-select: none; -ms-user-select: none;/* 以下两个属性目前并未支持，写在这里为了减少风险 */-o-user-select: none;user-select: none; 监听img标签加载图片完成再执行其他操作1&lt;img id=&quot;img&quot;&gt; 12345678910// img标签动态添加var img=new Image();img.src=&#x27;&#x27;; // 图片urlimg.onload=function()&#123; console.log(&#x27;背景图片已加载完毕&#x27;);&#125;;// img标签已有document.querySelector(&#x27;#img&#x27;).onload = function() &#123; console.log(&#x27;加载完成了);&#125;; tips:onload 与 ready 的区别是： 1、ready 是 DOM 加载完成的事件 2、onload 是所有内容加载完成(如：图片) h5实现长按保存图片的功能-利用a标签-下载的方式这种方式只是下载，并没有调起系统相册 1234567891011121314151617 function saveImg (url) &#123; var _image = new Image() _image.src = url + &#x27;?v=&#x27; + Math.random() // 处理缓存 _image.crossOrigin = &#x27;*&#x27; // 支持跨域图片 _image.onload = function () &#123; var canvas = document.createElement(&#x27;canvas&#x27;) canvas.width = _image.width canvas.height = _image.height var ctx = canvas.getContext(&#x27;2d&#x27;) ctx.drawImage(_image, 0, 0, _image.width, _image.height) var dataURL = canvas.toDataURL(&#x27;image/png&#x27;); // 转换为base64的图片才能直接下载 var a = document.createElement(&#x27;a&#x27;); a.download = &#x27;抽签&#x27; // 设置a节点的download属性值 a.href = dataURL; // 将图片的src赋值给a节点的href a.dispatchEvent(new MouseEvent(&#x27;click&#x27;, &#123; bubbles: true, cancelable: true, view: window &#125;)); // 兼容火狐 &#125;&#125;, 踩坑1——iPhone11img标签包裹的图片，微信打开链接长按保存失效，其他手机可以找问题思路： 访问正常的img包裹的链接，百度上随便找了一个链接，发现iphone11微信访问是成功的,但是自己的开发的html页面就是不行。 访问自己本地开发的其他有img标签的html页面也可以长按保存图片，但是自己开发的抽签html页面就是不行。 后来怀疑是不是图片url格式的影响，就把自己的抽签页面图片url替换正常的html页面的url,发现也不行，果然是url格式的问题。 直接为了优化图片，在图片的后缀上加了?caplist=jpg,webp,avif这样的后缀，这样可以把jpg的原始图片尺寸压缩小50%左右，但是正是因为这个原因，保存图片的格式为webp的格式，导致微信保存图片失败，去掉这样的后缀就好了。 tips: 在cdn侧判断参数caplist，根据预先定义的优先级，在caplist能够支持图片格式的范围内，返回对应格式的图片内容，若响应了404，则返回次优先级格式图片的内容，直到重试返回图片格式的范围内最低优先级格式的图片内容，若最低优先级格式的图片内容为404，则响应用户为404 HTTP_NOT_FOUND优先级：avif &gt; heic &gt; webp &gt; jpg &gt; png，由图片生产团队提供……","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"js","slug":"js","permalink":"https://darlinghan.github.io/hlblog-pages/tags/js/"}]},{"title":"卡片翻转动画","slug":"卡片翻转动画","date":"2021-01-23T11:00:16.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2021/01/23/卡片翻转动画/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/23/%E5%8D%A1%E7%89%87%E7%BF%BB%E8%BD%AC%E5%8A%A8%E7%94%BB/","excerpt":"","text":"css实现图片的翻转效果实现效果如下 1234&lt;div class=&quot;pos-box img-style&quot; style=&quot;background-image: url(&#x27;https://hl-blog.oss-cn-shanghai.aliyuncs.com/%E5%A4%B4%E5%83%8F.jpg&#x27;);&quot;&gt;&lt;/div&gt;&lt;div class=&quot;neg-box img-style&quot; style=&quot;background-image: url(&#x27;https://hl-blog.oss-cn-shanghai.aliyuncs.com/%E5%96%9D%E8%8C%B6.jpg&#x27;);&quot;&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158&lt;style&gt; .img-style &#123; background-size: cover; background-repeat: no-repeat; background-position: center; &#125; .pos-box &#123; z-index: 1; &#125; .neg-box &#123; z-index: -1; &#125; .pos-box, .neg-box &#123; position: absolute; left: 50%; top: 0; width: 60vw; height: 120vw; margin-left: -30vw; &#125; /* 正面 */ .reverse1 &#123; -webkit-animation: flipOutYtest 0.75s linear; animation: flipOutYtest 0.75s linear; -webkit-animation-fill-mode: both; animation-fill-mode: both; z-index: -1; &#125; @keyframes flipOutYtest &#123; from &#123; -webkit-transform: perspective(1400px); transform: perspective(1400px); &#125; 40% &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, 60deg); transform: perspective(1400px) rotate3d(0, 1, 0, 60deg); opacity: 1; &#125; 50% &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, 90deg); transform: perspective(1400px) rotate3d(0, 1, 0, 90deg); opacity: 0; &#125; to &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, 180deg); transform: perspective(1400px) rotate3d(0, 1, 0, 180deg); opacity: 0; &#125; &#125; @-webkit-keyframes flipOutYtest &#123; from &#123; -webkit-transform: perspective(1400px); transform: perspective(1400px); &#125; 40% &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, 60deg); transform: perspective(1400px) rotate3d(0, 1, 0, 60deg); opacity: 1; &#125; 50% &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, 90deg); transform: perspective(1400px) rotate3d(0, 1, 0, 90deg); opacity: 0; &#125; to &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, 180deg); transform: perspective(1400px) rotate3d(0, 1, 0, 180deg); opacity: 0; &#125; &#125; /* 反面 */ .reverse2 &#123; -webkit-animation: flipInYtest 0.75s linear; animation: flipInYtest 0.75s linear; -webkit-animation-fill-mode: both; animation-fill-mode: both; z-index: 1; &#125; @keyframes flipInYtest &#123; from &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, -180deg); transform: perspective(1400px) rotate3d(0, 1, 0, -180deg); opacity: 0; &#125; 50% &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, -90deg); transform: perspective(1400px) rotate3d(0, 1, 0, -90deg); opacity: 0; &#125; 60% &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, -60deg); transform: perspective(1400px) rotate3d(0, 1, 0, -60deg); opacity: 1; &#125; to &#123; -webkit-transform: perspective(1400px); transform: perspective(1400px); opacity: 1; &#125; &#125; @-webkit-keyframes flipInYtest &#123; from &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, -180deg); transform: perspective(1400px) rotate3d(0, 1, 0, -180deg); opacity: 0; &#125; 50% &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, -90deg); transform: perspective(1400px) rotate3d(0, 1, 0, -90deg); opacity: 0; &#125; 60% &#123; -webkit-transform: perspective(1400px) rotate3d(0, 1, 0, -60deg); transform: perspective(1400px) rotate3d(0, 1, 0, -60deg); opacity: 1; &#125; to &#123; -webkit-transform: perspective(1400px); transform: perspective(1400px); opacity: 1; &#125; &#125; /* 掉落效果 */ .drop &#123; -webkit-animation: tobottom 1.5s ease; animation: tobottom 1.5s ease; -webkit-animation-fill-mode: both; animation-fill-mode: both; &#125; @keyframes tobottom&#123; from&#123; top: -100vh; &#125; to&#123; top: 6vw; &#125; &#125; @-webkit-keyframes tobottom&#123; from&#123; top: -100vh; &#125; to&#123; top: 6vw; &#125; &#125; &lt;/style&gt; 123456789101112131415161718var posDiv = document.getElementsByClassName(&#x27;pos-box&#x27;)[0]var negDiv = document.getElementsByClassName(&#x27;neg-box&#x27;)[0]posDiv.addEventListener(&#x27;click&#x27;, function () &#123; // posDiv.removeAttribute(&#x27;class&#x27;, &#x27;reverse2&#x27;) // negDiv.removeAttribute(&#x27;class&#x27;, &#x27;reverse1&#x27;) posDiv.classList.remove(&quot;reverse2&quot;) negDiv.classList.remove(&quot;reverse1&quot;) posDiv.setAttribute(&#x27;class&#x27;, posDiv.getAttribute(&#x27;class&#x27;) + &quot; &quot; + &quot;reverse1&quot;) negDiv.setAttribute(&#x27;class&#x27;, negDiv.getAttribute(&#x27;class&#x27;) + &quot; &quot; + &quot;reverse2&quot;)&#125;)negDiv.addEventListener(&#x27;click&#x27;, function () &#123; // posDiv.removeAttribute(&#x27;class&#x27;, &#x27;reverse1&#x27;) // negDiv.removeAttribute(&#x27;class&#x27;, &#x27;reverse2&#x27;) posDiv.classList.remove(&quot;reverse1&quot;) negDiv.classList.remove(&quot;reverse2&quot;) posDiv.setAttribute(&#x27;class&#x27;, posDiv.getAttribute(&#x27;class&#x27;) + &quot; &quot; + &quot;reverse2&quot;) negDiv.setAttribute(&#x27;class&#x27;, negDiv.getAttribute(&#x27;class&#x27;) + &quot; &quot; + &quot;reverse1&quot;)&#125;) 用原生js给DOM元素添加、删除一个类名 方法一： 12DOM.setAttribute(&quot;class&quot;, &quot;类名&quot;)DOM.removeAttribute(&quot;class&quot;, &quot;类名&quot;) 方法二： 123DOM.classList.add(&#x27;类名&#x27;); //添加类名DOM.classList.remove(&#x27;类名&#x27;); //删除类名DOM.classList.toggle(&#x27;类名&#x27;); //切换类名 setAttribute和add的区别 setAttribute用于创建或改变某个新属性。如果指定属性已经存在，则只设置该值并且会替换原来的值。 add方法是添加某个类，不会替换属性中的值，并且需要跟classList使用，因为它是classList的方法。","categories":[{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/categories/css/"}],"tags":[{"name":"animation","slug":"animation","permalink":"https://darlinghan.github.io/hlblog-pages/tags/animation/"},{"name":"动画","slug":"动画","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%8A%A8%E7%94%BB/"}]},{"title":"滑动穿透","slug":"滑动穿透","date":"2021-01-18T09:39:04.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2021/01/18/滑动穿透/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/18/%E6%BB%91%E5%8A%A8%E7%A9%BF%E9%80%8F/","excerpt":"","text":"弹框出现不允许背景滑动，改变position布局值时，scroll滚动条维持在原来的位置，不要回到顶部。 12345678910111213141516171819202122232425262728293031323334if (true) &#123; // 弹框出现 if (ffsUtils.is_ffsPhoneInfo() &amp;&amp; Q.ua.IOS) &#123; // 如果是IOS环境允许滚动 //do nothing // this.prevent(); &#125; else &#123; // 控制弹幕的背景颜色不因为scroll的改变而改变 Q.cookie.set(&#x27;dm_no_change&#x27;, &#x27;show&#x27;) Q.$(&quot;body&quot;).css(&quot;top&quot;, -window.scrollY + &quot;px&quot;); Q.$(&quot;body&quot;).css(&quot;position&quot;, &quot;fixed&quot;); &#125;&#125; else &#123; if (ffsUtils.is_ffsPhoneInfo() &amp;&amp; Q.ua.IOS) &#123; //do nothing &#125; else &#123; Q.cookie.set(&#x27;dm_no_change&#x27;, &#x27;&#x27;) let scrollY = -parseInt(Q.$(&quot;body&quot;).css(&quot;top&quot;)) Q.$(&quot;body&quot;).css(&quot;position&quot;, &quot;static&quot;); Q.$(&quot;body&quot;).css(&quot;top&quot;, &quot;&quot;); window.scrollTo(0, scrollY); &#125;&#125;// 禁止默认事件prevent() &#123; this.$refs[&quot;mask&quot;].addEventListener( &quot;touchmove&quot;, function (e) &#123; e.preventDefault(); &#125;, false );&#125;,","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/tags/css/"}]},{"title":"图标与文字对齐","slug":"图标与文字对齐","date":"2021-01-18T09:28:55.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2021/01/18/图标与文字对齐/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/18/%E5%9B%BE%E6%A0%87%E4%B8%8E%E6%96%87%E5%AD%97%E5%AF%B9%E9%BD%90/","excerpt":"","text":"icon图标与文字对齐 开发过程中经常遇到img和span标签包含的文字不对齐，设置vertical-align: middle发现图片icon还是会偏下 解决方案：设置img的vertical-align为top,然后设置margin-top属性 1234&lt;div class=&quot;father&quot;&gt; &lt;img src=&quot;https://hl-blog.oss-cn-shanghai.aliyuncs.com/%E5%A4%B4%E5%83%8F.jpg&quot;/&gt; &lt;span&gt;右边文字&lt;/span&gt;&lt;/div&gt; 12345678910111213.father &#123; width: 60px; height: 60px;&#125;img &#123; width: 40px; height: 40px; vertical-align: top; margin-top: 10px; background-size: cover; background-position: center; background-repeat: no-repeat;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/tags/css/"},{"name":"vertical-align","slug":"vertical-align","permalink":"https://darlinghan.github.io/hlblog-pages/tags/vertical-align/"}]},{"title":"跳板机（堡垒机）使用","slug":"跳板机使用","date":"2021-01-11T11:50:54.000Z","updated":"2022-08-16T08:13:27.556Z","comments":true,"path":"2021/01/11/跳板机使用/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/11/%E8%B7%B3%E6%9D%BF%E6%9C%BA%E4%BD%BF%E7%94%A8/","excerpt":"","text":"vscode中登录跳板机 进入bash 登录跳板机 进入对应的服务器 进入项目所在的目录 查看分支 git pull 最新代码 退出到根部文件，执行脚本，编译文件 12345678bashssh hanXXX@jumpbox.XXX.domainssh 10.13X.XXX.XXXcd /data/XXX/XXX/XXXgit statusgit pullcd // 回到根目录./XXX_build.sh // 执行脚本 XXX_build.sh脚本里的内容如下 123456789101112#!/bin/bashcd /data/XXX/XXX/XXXecho &#x27;注意当前git 分支&#x27;git statusgit pullnode -vnvm -vnvm use syatemnpm install &amp; npm run build:testcd /lib/systemd/systemsystemctl restart XX_mall_node.servicesystemctl status XX_mall_node.service xshell工具登录跳板机 Xshell安装，用户信息填写公司信息 新建会话，配置主机端口、用户身份验证 申请堡垒机权限 先登录跳板机 ssh hanXXX@jumpbox.XXX.domain 输入 登入跳板机后出现以下错误——原因：堡垒机那边申请权限的时候没有添加服务器——需要申请下服务器 申请成功后的状态 进入测试环境项目所在目录 拉去最新代码+回调根目录+编译","categories":[{"name":"工具","slug":"工具","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"跳板机","slug":"跳板机","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E8%B7%B3%E6%9D%BF%E6%9C%BA/"},{"name":"堡垒机","slug":"堡垒机","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%A0%A1%E5%9E%92%E6%9C%BA/"},{"name":"ssh","slug":"ssh","permalink":"https://darlinghan.github.io/hlblog-pages/tags/ssh/"},{"name":"xshell","slug":"xshell","permalink":"https://darlinghan.github.io/hlblog-pages/tags/xshell/"}]},{"title":"移动开发调试技巧","slug":"移动开发调试技巧","date":"2021-01-11T11:37:33.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2021/01/11/移动开发调试技巧/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2021/01/11/%E7%A7%BB%E5%8A%A8%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/","excerpt":"","text":"安卓手机安装测试包 电脑数据线连接手机 手机打开调试模式（开发者选项-调试） 电脑打开控制台cmd 输入 12adb devices // 查看连接的设备adb install -r -t XXX.apk // 安装测试包 tips:使用Chrome://inspect调试 Android 设备上Webview 修改User Agent模拟客户端环境 点击菜单中的Edit 选择Add Custom device User agent string类似于以下值：1Mozilla/5.0 (iPhone; CPU iPhone OS 12_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/15E148 XXXApp/3.5.3 其中XXXAPP就是标识某个客户端的关键字","categories":[{"name":"android/ios","slug":"android-ios","permalink":"https://darlinghan.github.io/hlblog-pages/categories/android-ios/"}],"tags":[{"name":"adb","slug":"adb","permalink":"https://darlinghan.github.io/hlblog-pages/tags/adb/"}]},{"title":"exports、module.exports、export、export default的区别","slug":"commonJs和import的区别","date":"2020-12-30T09:01:27.000Z","updated":"2022-08-16T08:13:27.552Z","comments":true,"path":"2020/12/30/commonJs和import的区别/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2020/12/30/commonJs%E5%92%8Cimport%E7%9A%84%E5%8C%BA%E5%88%AB/","excerpt":"区别一module.exports和exports 是CommonJs的规范，被使用于Node.js中export、export default 是ES6的规范，被用于React、Vue中 区别二通过export方式导出时，导入要加上 { }通过export default导出时，不需要","text":"区别一module.exports和exports 是CommonJs的规范，被使用于Node.js中export、export default 是ES6的规范，被用于React、Vue中 区别二通过export方式导出时，导入要加上 { }通过export default导出时，不需要 区别三module代表一个模块，exports是module的属性，表示对外的接口。加载某个模块，其实就是加载该模块的module.exports属性。 区别四CommonJs（require）运行时加载（动态加载）;ES6（import）编译时加载（静态加载）,必须放在文件开头。 区别五require是请求整个包对象而import是只请求模块中需要的部分。 本质区别六两者的输出都是一个具备多个属性和方法的对象import导入模块的属性和方法是强绑定的，包括基础类型；导入和导出的只都指向同一个内存地址。require则是普通的值传递或者引用传递。（旧值）就算导出的值发生变化，导入的值也不会发生变化。 写法不一样 require写法 123const fs = require(&#x27;fs&#x27;);exports.fs = fsmodule.exports = fs import写法很多 12345678910import fs from &#x27;fs&#x27;;import &#123;default as fs&#125; from &#x27;fs&#x27;;import * as fs from &#x27;fs&#x27;;import &#123;readFile&#125; from &#x27;fs&#x27;;import fs, &#123;readFile&#125; from &#x27;fs&#x27;export default fs;export const fs;export &#123;readFile, read&#125;;export * from &#x27;fs&#x27; 提问 1.require和import会不会循环引用 不会，因为模块执行后会把导出的值缓存。下次再require或import都是读的缓存，不会再次执行。","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"CommonJs - ES6","slug":"CommonJs-ES6","permalink":"https://darlinghan.github.io/hlblog-pages/tags/CommonJs-ES6/"}]},{"title":"img加载失败Vue中如何监听","slug":"img加载失败如何监听","date":"2020-12-29T07:52:58.000Z","updated":"2022-08-16T08:13:27.553Z","comments":true,"path":"2020/12/29/img加载失败如何监听/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2020/12/29/img%E5%8A%A0%E8%BD%BD%E5%A4%B1%E8%B4%A5%E5%A6%82%E4%BD%95%E7%9B%91%E5%90%AC/","excerpt":"","text":"vue中img标签加载失败 使用默认图片template中这么写，如果src中的图片加载失败就会加载defaultImg中的路径 1234&lt;img:src=&quot;https://hl-blog.oss-cn-shanghai.aliyuncs.com/%E5%A4%B4%E5%83%8F.jpg&quot;alt=&quot;加载失败咯&quot;:onerror=&quot;defaultImg&quot;/&gt; js中这么写 123456789export default &#123; data () &#123; return &#123; defaultImg: &quot;this.src=&#x27;https://hl-blog.oss-cn-shanghai.aliyuncs.com/%E5%A4%B4%E5%83%8F.jpg&#x27;&quot;, defaultImg2: &quot;this.src=&#x27;/src/assets/logo.png&#x27;&quot;, defaultImg3: &#x27;this.src=&quot;&#x27; + require(&#x27;../../assets/images/moren.png&#x27;) + &#x27;&quot;&#x27; &#125; &#125;&#125;","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"img - vue - onerror","slug":"img-vue-onerror","permalink":"https://darlinghan.github.io/hlblog-pages/tags/img-vue-onerror/"}]},{"title":"review1","slug":"review1","date":"2020-12-23T08:09:33.000Z","updated":"2022-08-16T08:13:27.554Z","comments":true,"path":"2020/12/23/review1/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2020/12/23/review1/","excerpt":"","text":"英语流利说一面 微前端描述下 &emsp;&emsp;将前端应用分解成一些更小、更简单的能够独立开发、测试、部署的小块，而在用户看来仍然是内聚的单个产品。&emsp;&emsp;简单来讲就是将庞大的整体拆成可控的小块，并明确它们之间的依赖关系，关键优势在于:&emsp;&emsp;a.代码块更小，更内聚，可维护性更高。&emsp;&emsp;b.松耦合，自治的团队可扩展性更好。&emsp;&emsp;c.渐进的升级、更新甚至重写部分前端功能成为了可能。 怎么协同开发 &emsp;&emsp;围绕业务功能纵向组建团队，而不是基于技术职能划分。最简单的可以根据最终用户看到的内容来划分，比如将应用中的每个页面作为一个微前端，并交付给一个团队全权负责。这种方式能够提升团队工作的凝聚力。&emsp;&emsp;实施渐进式重构，先让新旧代码和谐共存，再逐步转化旧代码，直到整个重构完成，这种增量升级的能力，可以降低产品局部替换的风险，包括升级依赖项、更替架构、UI改版等。另一方面也带来了技术选型上的灵活性，有助于新技术、新交互模式的实验性试错。 注意事项 &emsp;&emsp;独立构建意味着公共资源的冗余，继而增加用户的流量负担。&emsp;&emsp;团队自治程度的增加，可能会破坏协作。&emsp;&emsp;微前端将产生一堆小的东西，因此需要考虑是否具备采用这种方法所需的技术和组织成熟度。&emsp;&emsp;&emsp;&emsp;a.现有的前端开发、测试、发布流程如何扩展支持很多个应用&emsp;&emsp;&emsp;&emsp;b.分散的，控制弱化的工具体系及开发实践是否可靠&emsp;&emsp;&emsp;&emsp;c.针对各式各样的前端代码库，如何建立质量标准 场景问题 两个请求并行发送，如果其中一个请求出错，就用默认值代替，怎么实现 页面有两个相同的请求怎么复用 react 生命周期 react通信 跨域通信有哪些 http缓存 懒加载 commonjs 和 es module区别 tree sharking原理 loader 会 plugins区别 防抖和节流区别，大概实现 了解哪些新技术 二面 介绍一下项目亮点 介绍一下微前端 说一下npm包管理机制 A插件依赖D插件版本是1.0.1，B插件依赖D插件版本是1.0.2，C插件依赖D插件1.1.0，那么npm i 之后，下载了几个版本的D插件HTTP常见的状态码 ，401 403分别是什么， 常见的请求头响应头有哪些 说一下webpack配置，常用的loader、plugin 场景题目12345if(a == 1) &#123; console.log(a);&#125;// 控制台会报错么// 如果报错是什么类型的错误 三面 介绍项目 你充当的角色 你平时是如何学习的 对自己的规划 别人怎么评价你的 携程一面 介绍微前端 乾坤框架怎么实现的沙盒机制 手写一个单例模式 手写一个发布订阅模式 手写一个redux的compose函数 手写一个组合继承 垃圾回收机制了解么，介绍一下 自定义hooks和函数有什么区别 二面 事件循环输出顺序问题 实现函数异步请求成功后就返回，失败后重试max次 前端怎么埋点监控 hooks为什么不能写在if 语句里面 useCallback的实现原理 怎么画1px像素线，逻辑像素,物理像素的概念 自己写的mock服务是怎么实现的，为什么不在webpack里用相关插件 三面 公司是做什么的，介绍下公司产品 你现在充当的团队角色 你现在是一个管理者了，为什么离职了 将来的规划 携程面的是一个新的业务线，需要一段时间的996，但是携程本身不是996公司了，加班有加班费，并且携程面试完之后会有一个行测评测和英语口语评测，必须要过。 携程面试完之后会有一个行测评测和英语口语评测，必须要过。 比心APP一面 介绍下项目 说一下微前端实现 写一个Promise.all函数 写一个发布订阅模式 一道setTimeout事件循环的题目 手写题实现电话号码隔位显示（3 4 4） 算法题[0, 2, 3, 0, 5, 0, 0]将0全部移动到后面去 二面 介绍下项目亮点 说一下redux如何使用 redux源码介绍下 你说你angular, vue, react都使用过，说一下三者的区别 了解缓存么 大概讲一下 解释下https 介绍几个git常见的操作命令 三面 介绍项目亮点 react通信是怎么样的 react-redux中connect怎么连接组件的 为什么要离职 你最擅长的是什么 百度一面 介绍一下微前端 乾坤框架源码看过么 写一个自定义hooks，useDiff 数组去重方法越多越好 写一个匹配邮箱的正则 实现函数12function repeat(s, count) &#123;&#125;repeat(&#x27;s&#x27;, 3) // 输出 ‘sss’ 函数实现12345678// 正则匹配标签名 输出div p span&lt;div&gt; &lt;p&gt; &lt;span&gt;&lt;/span&gt; &lt;/p&gt; &lt;span&gt; &lt;/span&gt;&lt;/div&gt; 实现一个深拷贝 实现函数统计字符串里面出现次数最多的字符 有做过什么优化么 二面 介绍下微前端 hooks常用的api有哪些 useState,useEffect,useRef,useMemo在存储数据方面有什么区别 hooks组件怎么向外传递方法 写一个三列等距布局，越多越好 写一个公共组件需要注意哪些 写一个表单生成组件 生成一个完整的组件 表单填入的值，可以返回出去123456789101112131415const config = [ &#123; type: &#x27;input&#x27;, name: &#x27;name&#x27;, key: &#x27;name&#x27; &#125;, &#123; type: &#x27;select&#x27;, name: &#x27;work&#x27;, key: &#x27;work&#x27;, options: [] &#125;] &lt;FormC config=&#123;config&#125; /&gt; 你ts用的多么，说几个高级用法 介绍下interface和type的区别 三面 介绍下项目 为什么要重构项目 为什么要做微前端 详细说一下机器学习做的事情 你觉得AI智能给前端带来的变化 百度好像react比较看重，其他的几个岗位基本也是招react 京东凹凸实验室 介绍下微前端实现方式，以及你们是怎么做的 乾坤框架源码看过没 commonjs 和 es module区别 代码题112345678// a.jsmodule.exports = &#123;&#125;;exports = &#123; name: &#x27;json&#x27;&#125;;// b.jsconst a = require(&#x27;./a.js&#x27;); // 输出什么 代码题212345// a.jsmodule.exports = function a() &#123;&#125;// b.js // 在b中用es6 module语法怎么引入 介绍下浏览器缓存机制 webpack打包原理是怎么样的 webpack 插件写过没，介绍下原理 webpack5介绍下 看你用过react介绍下fiber架构 esbuild知道么介绍下 你用过vue，现在出了vue3.0介绍下 vue现在出了一个打包工具vite，介绍下为什么会比其他的打包工具快 字节跳动一面 介绍下项目，微前端实现 介绍下https加密过程 redux原理 第三方登录，如果让你去设计，你会怎么考虑 介绍下浏览器和node的事件循环 做了一道原型链输出问题 做了一道setTimeout输出问题 做了一道this.setState输出问题（异步和合并） 实现一下promise.race 实现一下task().eat().sleep(2000).eat().sleep(2000)函数 判断链表有环但是空间复杂度是O(1) 二面 介绍下项目 redux用的熟么，介绍一下源码 connect怎么处理组件的 context会有什么性能问题么 实现防抖节流 实现sum(1)(2, 3)(4)柯里化 实现一个非树状结构转树状结构函数 一个查找最长子字符串算法 三面 介绍下项目 微前端实现 乾坤框架如何做到隔离 实现一个String.prototype._trim函数 实现一个reduce 实现一个多个请求，并行和串行的函数 tips: 想面试字节的同学，一定多刷函数实现，算法(连续做一个月)，源码理解","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"review","slug":"前端/review","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/review/"}],"tags":[{"name":"面试","slug":"面试","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E9%9D%A2%E8%AF%95/"}]},{"title":"小程序入门","slug":"小程序","date":"2020-12-22T08:43:18.000Z","updated":"2022-09-27T09:27:08.926Z","comments":true,"path":"2020/12/22/小程序/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2020/12/22/%E5%B0%8F%E7%A8%8B%E5%BA%8F/","excerpt":"","text":"下载微信开发者工具https://developers.weixin.qq.com/miniprogram/dev/devtools/stable.html 小程序中访问的域名必须都配置过比如要访问一个cserver.XXX.com的域名，该域名必须在后台管理系统中配置过，并且该域名下认证过该小程序文件。 微信小程序运行报——运行环境失败(2,101)背景是在ios上测试完后，想在Android机上再测试一下，安卓机上登录后，运行开发版小程序报——运行环境失败；解决方法：杀掉微信进程，重启微信就好了。（更新微信也尝试一下) 小程序官网解读 网页开发渲染线程和脚本线程是互斥的，而小程序中两者分开，分别运行在不同的线程中。逻辑层（脚本线程）运行在 小程序开发过程： 申请小程序账号 安装小程序开发者工具 配置项目等等","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"小程序","slug":"前端/小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"}],"tags":[]},{"title":"跨域","slug":"跨域","date":"2020-12-21T06:43:54.000Z","updated":"2022-08-16T08:13:27.556Z","comments":true,"path":"2020/12/21/跨域/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2020/12/21/%E8%B7%A8%E5%9F%9F/","excerpt":"","text":"工作中遇到的跨域问题vue 本地起服务,端口号是 3030vue.XXX.com:3030 代理到了 127.0.0.1(localhost)vue.XXX.com:3030 访问后端地址 mall.XXX.com 报跨域问题 如下图所示携带 cookie 时，需要设置如下参数,由于安全策略的影响 1axios.defaults.withCredentials = true; //Cookie跨域 123Access-Control-Allow-Credentials: trueAccess-Control-Allow-Origin: &#x27;http://vue.iqiyi.com:3030&#x27; // 这里不能设置*,要写死前端具体请求的域名// 因为*太放纵太宽泛了(permissive)会破坏credentials的使用，所以必须设置允许跨域的头部的域名为具体某个 去掉浏览器同源策略影响 mac 环境：terminal 中输入以下命令，打开浏览器 123open -n /Applications/Google\\ Chrome.app/ --args --disable-web-security --user-data-dir=/Users/XXX/Documents/MyChromeDevUserData// XXX 就是自己mac电脑的路径 就是 @ 前面的字符 然后屏蔽设置https://juejin.cn/post/6844904096655212558 谷歌浏览器地址栏输入：chrome://flags/ 找到：SameSite by default cookies、Cookies without SameSite must be secure 设置上面这两项设置成 Disable","categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"}],"tags":[{"name":"工作","slug":"工作","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"跨域","slug":"跨域","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E8%B7%A8%E5%9F%9F/"}]},{"title":"hexo+github pages部署博客","slug":"hexo+github pages部署博客","date":"2020-12-08T11:13:15.000Z","updated":"2022-08-16T08:13:27.553Z","comments":true,"path":"2020/12/08/hexo+github pages部署博客/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2020/12/08/hexo+github%20pages%E9%83%A8%E7%BD%B2%E5%8D%9A%E5%AE%A2/","excerpt":"","text":"一、hexo环境配置 a. 安装Node.js环境 b. 安装Git环境 c. 安装Hexo npm install -g hexo-cli d. hexo init 项目名 e. npm intsall f. hexo generator 生成静态文件 g. hexo server 启动 h. npm install hexo-deployer-git --save 安装hexo-deployer-git i. deploy type: git repository: git@github.com:YOUR_ID/YOUR_ID.github.io.git branch: master 在”_config.yml”配置中将deploy 的 type由github改为git j. hexo deploy 实现自动部署到git k. 替换主题的时候 下载对应的主题文件 放到themes文件目录下，修改_config.yml文件中的theme为该主题目录名 l. If your site is put in a subdirectory, set url as ‘http://example.com/child&#39; and root as ‘/child/‘ url: https://darlinghan.github.io/hlblog-pages root: /hlblog-pages/部署hexo到GitHub pages时样式错乱 要修改_config.yml下的url为(GitHub——settings——GitHub Pages)生成的路径，及root为路径地址 二、GitHub Pages配置使用它部署静态资源，因为免费，不限容量大小，而且可以集成git,开发使用起来非常方便，虽然访问有点慢。 a. GitHub repository创建自己的仓库TESTXXX b. 修改该仓库下的settings——》Github Pages——》Theme Chooser——》choose theme——》source 配置 master(或其他分支) c. 配置公钥私钥 Git Bash下 输入ssh-keygen -t rsa -C &quot;XXXXX@qq.com&quot;指令 一路回车 会在~/.ssh/下生成两个文件id_rsa和id_rsa.pub GitHub 个人中心的 SSH and GPG keys下 新增SSH key 复制id_rsa.pub下的内容 三、映射自己的专属域名背景： 我是在阿里云oss购买的域名，10年199元hanling.fun的域名，便宜吧~ a. 方式一 直接GitHub——》仓库的settings——》Github pages——》Custom Domain输入自己买的域名， 然后一般要10分钟以后生效，我搭建的时候当天晚上没有生效，第二天早上看了下，还是没有生效， 然后我又在Custom Domain里又重新输入了一下自己的域名， 然后Github Pages下的域名地址就由原来Github默认提供的地址更新为了我自己的域名， 并且提升30分钟至1小时后才会更新，所以再等等看吧~ b. 方式二 Github博客部署hexo静态文件的那个repository（仓库）根目录下新建CNAME文件，里面放入自己的域名。 购买的域名官方网站去解析，添加记录——》记录类型为CNAME， 主机记录为@，解析线路默认，记录值为github的仓库名（也就是自己的GitHub地址），TTL可选默认10分钟。 四、过程中遇到的问题 1.hexo deploy时CNAME文件会丢失直接hexo——》source目录下建CNAME文件——》hexo deploy时会将该文件生成到public下；该文件就是填写自己的域名，GitHub会自动读取这个文件里的内容把它映射到GitHub pages原本提供的地址。 2.部署后样式错乱问题注意public打包后的文件，index.html中引入的样式路径是否正确，不正确的话对应的调整_config.yml中的url,root配置。 3.开启搜索模式要实现站内搜索，必须在hexo目录下先安装 hexo-generator-json-content插件，然后设置_config.yml文件下的insight为true 4.开启评论功能livere（来必力）网站注册账户选择来必力City版本——免费——安装——》生成了代码，复制其中的data-uid登录自己的账户（比如微信）修改hexo主题下的_config.yml文件中的livere_shortname字段为刚刚复制的内容就大功告成啦~ 5.引入图片资源安装cnpm install hexo-asset-image,修改_config.yml下的post_asset_folder属性为true。此时再执行命令 hexo n article_name 创建新的文章，在 source/_posts 中会生成文章 post_name.md 和同名文件夹 post_name,我们将文章中所使用到的将图片资源均放在 post_name 中，这时就可以在文章中使用相对路径引用图片资源了。![img_name](img_name.jpg) #文章中的图片资源路径格式 tips: 并没有生效……还没找到原因 五、hexo一些常见命令 新建草稿，不会出现在文章中 hexo new draft test2 将草稿中的文章发布到_post中hexo publish draft test2 清空hexo生成的public文件hexo clean 生成静态文件hexo g 部署文件hexo d","categories":[{"name":"工具","slug":"工具","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B7%A5%E5%85%B7/"}],"tags":[{"name":"hexo","slug":"hexo","permalink":"https://darlinghan.github.io/hlblog-pages/tags/hexo/"},{"name":"github pages","slug":"github-pages","permalink":"https://darlinghan.github.io/hlblog-pages/tags/github-pages/"}]},{"title":"杭州四人游","slug":"杭州旅行随笔","date":"2020-12-04T16:00:00.000Z","updated":"2022-08-16T08:13:27.555Z","comments":true,"path":"2020/12/05/杭州旅行随笔/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2020/12/05/%E6%9D%AD%E5%B7%9E%E6%97%85%E8%A1%8C%E9%9A%8F%E7%AC%94/","excerpt":"","text":"周五周五就从公司出发了，走路到携程只要15分钟，然后朋友开车，开始愉快的四人行。当晚先去吃了夜宵~营业时间看心情，哈哈。 周六周六早上睡到自然醒，吃了丰富的早午餐，出发去灵隐寺拜佛。今年超多的不顺不开心，好在很多不好的都过去了，来祈福其他愿望。好巧的是赶上了志愿者导游讲解，让我这个来了灵隐寺三趟的人，终于明白很多理论知识。佛像旁边会有两位菩萨。文殊菩萨求事业，普贤菩萨求学业。还有降魔杵有没有接触地面也是有讲究的，如果完全着地是不接受供奉的。还有每位佛像手持的法器都是有一些说法的。四大天王，12生肖等等。师傅说：人生不可能风平浪静，一定会遇到挫折坎坷，遇到坎不要踩，跨过去就好了。所以进寺庙的门也是有讲究的，靠近门的哪边就哪个腿先跨过去，不要踩门槛。从左边绕进去，右边出，不要走回头路。然后下午去了初阳台爬山。 周日又是睡到自然醒呢~ 然后又来了一顿丰盛的早午饭。下午去喝茶打牌聊天。晚上吃了超级好吃的老鸭集，遇上两周年还给我们每人送了一份坚果小礼品。说明年3月份分店就会开到上海。到时候有口福了。","categories":[{"name":"lifeStyle","slug":"lifeStyle","permalink":"https://darlinghan.github.io/hlblog-pages/categories/lifeStyle/"}],"tags":[]},{"title":"markdown常见书写规范","slug":"markdown常见书写规范","date":"2020-11-24T08:09:33.000Z","updated":"2022-08-16T08:13:27.553Z","comments":true,"path":"2020/11/24/markdown常见书写规范/","link":"","permalink":"https://darlinghan.github.io/hlblog-pages/2020/11/24/markdown%E5%B8%B8%E8%A7%81%E4%B9%A6%E5%86%99%E8%A7%84%E8%8C%83/","excerpt":"","text":"首行缩进 第一种：半方大的空白&amp;ensp;或&amp;#8194;全方大的空白&amp;emsp;或&amp;#8195;不断行的空白格&amp;nbsp;或&amp;#160; 第二种：markdown语法支持html语法所以可以用这个，本人倾向这种方式，看起来比较干净。1&lt;p style=&quot;text-indent:2em&quot;&gt;xxxx&lt;/p&gt;","categories":[{"name":"markdown","slug":"markdown","permalink":"https://darlinghan.github.io/hlblog-pages/categories/markdown/"}],"tags":[]}],"categories":[{"name":"前端","slug":"前端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/"},{"name":"flutter","slug":"前端/flutter","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/flutter/"},{"name":"微信小程序","slug":"前端/微信小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"小程序","slug":"前端/小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"工作","slug":"前端/工作","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E5%B7%A5%E4%BD%9C/"},{"name":"移动端","slug":"前端/移动端","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"},{"name":"算法","slug":"算法","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E7%AE%97%E6%B3%95/"},{"name":"工作","slug":"工作","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B7%A5%E4%BD%9C/"},{"name":"工具","slug":"工具","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B7%A5%E5%85%B7/"},{"name":"正则","slug":"正则","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E6%AD%A3%E5%88%99/"},{"name":"小程序","slug":"小程序","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"公众号","slug":"小程序/公众号","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%B0%8F%E7%A8%8B%E5%BA%8F/%E5%85%AC%E4%BC%97%E5%8F%B7/"},{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/categories/css/"},{"name":"android/ios","slug":"android-ios","permalink":"https://darlinghan.github.io/hlblog-pages/categories/android-ios/"},{"name":"review","slug":"前端/review","permalink":"https://darlinghan.github.io/hlblog-pages/categories/%E5%89%8D%E7%AB%AF/review/"},{"name":"lifeStyle","slug":"lifeStyle","permalink":"https://darlinghan.github.io/hlblog-pages/categories/lifeStyle/"},{"name":"markdown","slug":"markdown","permalink":"https://darlinghan.github.io/hlblog-pages/categories/markdown/"}],"tags":[{"name":"css","slug":"css","permalink":"https://darlinghan.github.io/hlblog-pages/tags/css/"},{"name":"工作","slug":"工作","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%B7%A5%E4%BD%9C/"},{"name":"whistle","slug":"whistle","permalink":"https://darlinghan.github.io/hlblog-pages/tags/whistle/"},{"name":"动画","slug":"动画","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%8A%A8%E7%94%BB/"},{"name":"视频","slug":"视频","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E8%A7%86%E9%A2%91/"},{"name":"js","slug":"js","permalink":"https://darlinghan.github.io/hlblog-pages/tags/js/"},{"name":"兼容性","slug":"兼容性","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%85%BC%E5%AE%B9%E6%80%A7/"},{"name":"webpack","slug":"webpack","permalink":"https://darlinghan.github.io/hlblog-pages/tags/webpack/"},{"name":"算法","slug":"算法","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E7%AE%97%E6%B3%95/"},{"name":"npm","slug":"npm","permalink":"https://darlinghan.github.io/hlblog-pages/tags/npm/"},{"name":"伪元素","slug":"伪元素","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E4%BC%AA%E5%85%83%E7%B4%A0/"},{"name":"安全距离","slug":"安全距离","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%AE%89%E5%85%A8%E8%B7%9D%E7%A6%BB/"},{"name":"vscode","slug":"vscode","permalink":"https://darlinghan.github.io/hlblog-pages/tags/vscode/"},{"name":"微信","slug":"微信","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%BE%AE%E4%BF%A1/"},{"name":"小程序","slug":"小程序","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"},{"name":"公众号","slug":"公众号","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%85%AC%E4%BC%97%E5%8F%B7/"},{"name":"H5","slug":"H5","permalink":"https://darlinghan.github.io/hlblog-pages/tags/H5/"},{"name":"git","slug":"git","permalink":"https://darlinghan.github.io/hlblog-pages/tags/git/"},{"name":"transition","slug":"transition","permalink":"https://darlinghan.github.io/hlblog-pages/tags/transition/"},{"name":"animation","slug":"animation","permalink":"https://darlinghan.github.io/hlblog-pages/tags/animation/"},{"name":"vertical-align","slug":"vertical-align","permalink":"https://darlinghan.github.io/hlblog-pages/tags/vertical-align/"},{"name":"跳板机","slug":"跳板机","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E8%B7%B3%E6%9D%BF%E6%9C%BA/"},{"name":"堡垒机","slug":"堡垒机","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E5%A0%A1%E5%9E%92%E6%9C%BA/"},{"name":"ssh","slug":"ssh","permalink":"https://darlinghan.github.io/hlblog-pages/tags/ssh/"},{"name":"xshell","slug":"xshell","permalink":"https://darlinghan.github.io/hlblog-pages/tags/xshell/"},{"name":"adb","slug":"adb","permalink":"https://darlinghan.github.io/hlblog-pages/tags/adb/"},{"name":"CommonJs - ES6","slug":"CommonJs-ES6","permalink":"https://darlinghan.github.io/hlblog-pages/tags/CommonJs-ES6/"},{"name":"img - vue - onerror","slug":"img-vue-onerror","permalink":"https://darlinghan.github.io/hlblog-pages/tags/img-vue-onerror/"},{"name":"面试","slug":"面试","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E9%9D%A2%E8%AF%95/"},{"name":"跨域","slug":"跨域","permalink":"https://darlinghan.github.io/hlblog-pages/tags/%E8%B7%A8%E5%9F%9F/"},{"name":"hexo","slug":"hexo","permalink":"https://darlinghan.github.io/hlblog-pages/tags/hexo/"},{"name":"github pages","slug":"github-pages","permalink":"https://darlinghan.github.io/hlblog-pages/tags/github-pages/"}]}